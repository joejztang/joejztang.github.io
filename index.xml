<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>130l</title><link>https://joejztang.github.io/</link><description>Recent content on 130l</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 19 Oct 2025 16:40:12 -0700</lastBuildDate><atom:link href="https://joejztang.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>mcp server quick experience</title><link>https://joejztang.github.io/posts/mcp-server-quick-experience/</link><pubDate>Sun, 19 Oct 2025 16:40:12 -0700</pubDate><guid>https://joejztang.github.io/posts/mcp-server-quick-experience/</guid><description>&lt;p&gt;I was wondering about mcp server for long time, and finally I gave it a quick try.&lt;/p&gt;
&lt;h1 id="idea-about-what-to-mcp"&gt;
 idea about what to &amp;ldquo;mcp&amp;rdquo;
 &lt;a class="heading-link" href="#idea-about-what-to-mcp"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;There are many mcp out there, doing all kinds of tasks. For example, there is a nice curated repo &lt;a href="https://github.com/punkpeye/awesome-mcp-servers?tab=readme-ov-file#text-to-speech" class="external-link" target="_blank" rel="noopener"&gt;here&lt;/a&gt; that you can find all kinds of mcp servers.&lt;/p&gt;
&lt;p&gt;But what should I start with my own mcp server experience? I wondered long. Finally I spotted on something that LLM historically doesn&amp;rsquo;t do well: calculations.&lt;/p&gt;</description></item><item><title>I am back</title><link>https://joejztang.github.io/posts/i-am-back/</link><pubDate>Fri, 10 Oct 2025 17:34:33 -0700</pubDate><guid>https://joejztang.github.io/posts/i-am-back/</guid><description>&lt;p&gt;Time flies!&lt;/p&gt;
&lt;p&gt;I revisited my github account and found out that this blog hasn&amp;rsquo;t been updated for 3 years. During the last 3 years this and that happened, but I wasn&amp;rsquo;t changed. I think I am better even more. Looking at those posts, I still think it&amp;rsquo;s anyways a good habbit to document and share.&lt;/p&gt;
&lt;p&gt;Now, with this being said, I will try to write more, again!&lt;/p&gt;</description></item><item><title>algorithm light topics</title><link>https://joejztang.github.io/posts/algorithm-light-topics/</link><pubDate>Fri, 18 Mar 2022 18:29:19 +0000</pubDate><guid>https://joejztang.github.io/posts/algorithm-light-topics/</guid><description>&lt;h2 id="inversion-counting"&gt;
 inversion counting
 &lt;a class="heading-link" href="#inversion-counting"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.interviewbit.com/blog/count-inversions-of-an-array/" class="external-link" target="_blank" rel="noopener"&gt;explain&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="quick-select-and-kth-smallest-andor-largest"&gt;
 quick select and kth smallest and/or largest
 &lt;a class="heading-link" href="#quick-select-and-kth-smallest-andor-largest"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;when asking kth smallest and/or largest questions, and ask for time complexity less than O(nlogn), must be quickselect.&lt;/p&gt;
&lt;h2 id="topological-sort"&gt;
 topological sort
 &lt;a class="heading-link" href="#topological-sort"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.hackerearth.com/practice/algorithms/graphs/topological-sort/tutorial/" class="external-link" target="_blank" rel="noopener"&gt;explain&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="union-find"&gt;
 union find
 &lt;a class="heading-link" href="#union-find"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://aquarchitect.github.io/swift-algorithm-club/Union-Find/" class="external-link" target="_blank" rel="noopener"&gt;explain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Union-Find is a data structure that can keep track of a set of elements partitioned into a number of disjoint (non-overlapping) subsets. It is also known as disjoint-set data structure.&lt;/p&gt;</description></item><item><title>priority queue, min and max heap implementation in python</title><link>https://joejztang.github.io/posts/priority-queue-min-and-max-heap-implementaton-in-python/</link><pubDate>Fri, 10 Sep 2021 23:47:46 +0000</pubDate><guid>https://joejztang.github.io/posts/priority-queue-min-and-max-heap-implementaton-in-python/</guid><description>&lt;h2 id="pq-and-min-heap"&gt;
 pq and min heap
 &lt;a class="heading-link" href="#pq-and-min-heap"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The following is some implementation of priority queue in python
In python, the default order is ascending, so it&amp;rsquo;s also a min-heap&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;from&lt;/span&gt; &lt;span style="color:#ff7b72"&gt;heapq&lt;/span&gt; &lt;span style="color:#ff7b72"&gt;import&lt;/span&gt; heappop, heappush, nlargest, nsmallest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;from&lt;/span&gt; &lt;span style="color:#ff7b72"&gt;typing&lt;/span&gt; &lt;span style="color:#ff7b72"&gt;import&lt;/span&gt; Any
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;PriorityQueue&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a5d6ff"&gt;&amp;#34;&amp;#34;&amp;#34;PriortyQuque implementation.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self) &lt;span style="color:#ff7b72;font-weight:bold"&gt;-&amp;gt;&lt;/span&gt; &lt;span style="color:#79c0ff"&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;pq &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;peek&lt;/span&gt;(self) &lt;span style="color:#ff7b72;font-weight:bold"&gt;-&amp;gt;&lt;/span&gt; Any:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;if&lt;/span&gt; self&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;pq: &lt;span style="color:#ff7b72"&gt;return&lt;/span&gt; self&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;pq[&lt;span style="color:#a5d6ff"&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;return&lt;/span&gt; &lt;span style="color:#79c0ff"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;pop&lt;/span&gt;(self) &lt;span style="color:#ff7b72;font-weight:bold"&gt;-&amp;gt;&lt;/span&gt; Any:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;if&lt;/span&gt; self&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;pq: &lt;span style="color:#ff7b72"&gt;return&lt;/span&gt; heappop(self&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;pq)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;return&lt;/span&gt; &lt;span style="color:#79c0ff"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;push&lt;/span&gt;(self, obj: Any) &lt;span style="color:#ff7b72;font-weight:bold"&gt;-&amp;gt;&lt;/span&gt; &lt;span style="color:#79c0ff"&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; heappush(self&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;pq, obj)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;if&lt;/span&gt; &lt;span style="color:#79c0ff"&gt;__name__&lt;/span&gt; &lt;span style="color:#ff7b72;font-weight:bold"&gt;==&lt;/span&gt; &lt;span style="color:#a5d6ff"&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pq &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; PriorityQueue()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pq&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;push(&lt;span style="color:#a5d6ff"&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pq&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;push(&lt;span style="color:#a5d6ff"&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pq&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;push(&lt;span style="color:#ff7b72;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pq&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;push(&lt;span style="color:#a5d6ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;assert&lt;/span&gt; (nlargest(&lt;span style="color:#a5d6ff"&gt;3&lt;/span&gt;, pq&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;pq) &lt;span style="color:#ff7b72;font-weight:bold"&gt;==&lt;/span&gt; [&lt;span style="color:#a5d6ff"&gt;5&lt;/span&gt;, &lt;span style="color:#a5d6ff"&gt;3&lt;/span&gt;, &lt;span style="color:#a5d6ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;assert&lt;/span&gt; (nsmallest(&lt;span style="color:#a5d6ff"&gt;3&lt;/span&gt;, pq&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;pq) &lt;span style="color:#ff7b72;font-weight:bold"&gt;==&lt;/span&gt; [&lt;span style="color:#ff7b72;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;1&lt;/span&gt;, &lt;span style="color:#a5d6ff"&gt;0&lt;/span&gt;, &lt;span style="color:#a5d6ff"&gt;3&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;# time complexity:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;# push -- heappush O(logn)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;# pop -- heappop O(logn)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;# peek -- random access iterable 0 O(1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;P.S: All the interesting methods are in &lt;code&gt;Lib/heapq.py&lt;/code&gt;&lt;/p&gt;</description></item><item><title>everything about google cloud</title><link>https://joejztang.github.io/posts/everything-about-google-cloud/</link><pubDate>Mon, 16 Aug 2021 22:58:19 +0000</pubDate><guid>https://joejztang.github.io/posts/everything-about-google-cloud/</guid><description>&lt;h2 id="google-cloud-storage"&gt;
 google cloud storage
 &lt;a class="heading-link" href="#google-cloud-storage"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;There are 4 types of storage:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;standard storage
&lt;ul&gt;
&lt;li&gt;frequently accessed, so called hot data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nearline storage
&lt;ul&gt;
&lt;li&gt;read or modify on average ONCE per month or less&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;coldline storage
&lt;ul&gt;
&lt;li&gt;read or modify at most once per quater&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;archive storage
&lt;ul&gt;
&lt;li&gt;data archiving.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="google-cloud-resource-hierarchy"&gt;
 google cloud resource hierarchy
 &lt;a class="heading-link" href="#google-cloud-resource-hierarchy"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;organization (think it as a folder representing org) -&amp;gt; folders (think it as a folder rep teams) -&amp;gt; projects -&amp;gt; resources.&lt;/p&gt;</description></item><item><title>python unittest mock and pytest monkeypatch</title><link>https://joejztang.github.io/posts/python-unittest-mock-and-pytest-monkeypatch/</link><pubDate>Tue, 30 Mar 2021 17:28:40 +0000</pubDate><guid>https://joejztang.github.io/posts/python-unittest-mock-and-pytest-monkeypatch/</guid><description>&lt;h2 id="what-is-mockmonkeypatch"&gt;
 What is mock/monkeypatch?
 &lt;a class="heading-link" href="#what-is-mockmonkeypatch"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mock&lt;/code&gt; and &lt;code&gt;monkeypatch&lt;/code&gt; is heavily used on unittest where people avoid actual network calls, i/o calls, etc.&lt;/p&gt;
&lt;p&gt;This is so useful that people use unittest should know and use it freely without any difficulties.&lt;/p&gt;
&lt;h2 id="issues"&gt;
 Issues
 &lt;a class="heading-link" href="#issues"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I would like to use mock, but when project is becoming really large, suddenly mock doesn&amp;rsquo;t work! (amazing isn&amp;rsquo;t it? but it&amp;rsquo;s not mock, it&amp;rsquo;s purely me.)&lt;/p&gt;</description></item><item><title>machine learning a-z cheat sheet</title><link>https://joejztang.github.io/posts/machine-learning-az-cheat-sheet/</link><pubDate>Sun, 10 Jan 2021 13:02:28 +0000</pubDate><guid>https://joejztang.github.io/posts/machine-learning-az-cheat-sheet/</guid><description>&lt;div&gt;
 &lt;h1&gt;Table of Contents&lt;/h1&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#null-hypothesis-and-p-value"&gt;null hypothesis and p-value&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;

 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#linear-regression"&gt;Linear Regression&lt;/a&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#dummy-variable-trap-for-linear-regression"&gt;Dummy variable trap for linear regression&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#linear-regression-template"&gt;Linear Regression template&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#backward-elimination"&gt;Backward Elimination&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;a href="#svr"&gt;SVR&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#decision-tree-regression"&gt;Decision Tree Regression&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#random-forest-and-ensemble-learning"&gt;Random Forest and Ensemble Learning&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#r-squared-r2---performation-of-the-regression-model"&gt;R-Squared (R^2) - performation of the regression model&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;

 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#logistic-regression"&gt;Logistic Regression&lt;/a&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#confusion-matrix-and-accuracy-score"&gt;Confusion matrix and accuracy score&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;a href="#k-nearest-neighbor"&gt;K Nearest Neighbor&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#svm"&gt;SVM&lt;/a&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#kernel-svm"&gt;Kernel SVM&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#kernel-tricks"&gt;Kernel Tricks&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#non-linear-svr-not-svm"&gt;Non linear SVR (not SVM)&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;a href="#naive-bayes"&gt;Naive Bayes&lt;/a&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#naive-bayes-classifier-intuition"&gt;Naive Bayes Classifier intuition&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;a href="#decision-tree-classification"&gt;Decision Tree Classification&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#random-forest-classification"&gt;Random Forest Classification&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;

 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#k-means"&gt;K Means&lt;/a&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#k-means-init-trap"&gt;K means init trap&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#k-means-choosing-the-number-number-of-clusters"&gt;K Means: choosing the number number of clusters&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#k-mean-procedures"&gt;K Mean Procedures&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;a href="#hierarchical-clustering"&gt;Hierarchical Clustering&lt;/a&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#dendrograms"&gt;Dendrograms&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;

 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#apriori"&gt;Apriori&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#eclat"&gt;Eclat&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;

 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#summary-of-ucb-and-thompson-sampling"&gt;Summary of UCB and Thompson Sampling&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#upper-confidence-bound"&gt;Upper Confidence Bound&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#thompson-sampling"&gt;Thompson Sampling&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;

 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#types-of-natural-language-processing"&gt;Types of Natural Language Processing&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#classical-vs-deep-learning-models"&gt;Classical v.s. deep learning models&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#bag-of-words"&gt;Bag of Words&lt;/a&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#intuition"&gt;Intuition&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#assumptions"&gt;Assumptions&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#limitations"&gt;Limitations&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#choice-of-classifier-using-bag-of-words"&gt;choice of classifier using bag of words&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;

 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#simplified-training-process"&gt;simplified training process&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;

&lt;h2 id="null-hypothesis-and-p-value"&gt;
 null hypothesis and p-value
 &lt;a class="heading-link" href="#null-hypothesis-and-p-value"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://towardsdatascience.com/null-hypothesis-and-the-p-value-fdc129db6502" class="external-link" target="_blank" rel="noopener"&gt;very useful post&lt;/a&gt;&lt;/p&gt;</description></item><item><title>standard sql advance</title><link>https://joejztang.github.io/posts/standard-sql-advance/</link><pubDate>Fri, 26 Jun 2020 15:24:19 +0000</pubDate><guid>https://joejztang.github.io/posts/standard-sql-advance/</guid><description>&lt;p&gt;Recently, I have been asked to form a table, the schema is very simple:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;pid: STRING (NULLABLE)
rec_list1: STRING (NULLABLE)
rec_list2: STRING (NULLABLE)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&amp;rsquo;s a simple mapping from pid to its recommending list. Note that they are all strings.
However, My boss wants me to convert to something like this:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;pid: STRING (NULLABLE)
left: STRUCT
 pid: NUMBERIC (NULLABLE)
 cat_id: NUMBERIC (NULLABLE)
 cat_name: STRING (NULLABLE)
right: STRUCT
 pid: NUMBERIC (NULLABLE)
 cat_id: NUMBERIC (NULLABLE)
 cat_name: STRING (NULLABLE)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It seems to be easy but took me some time because I am green on advanced usage of sql. Therefore, I am introducing &lt;code&gt;UNNEST&lt;/code&gt;, &lt;code&gt;ARRAY&lt;/code&gt;, &lt;code&gt;STRUCT&lt;/code&gt;, etc to me.&lt;/p&gt;</description></item><item><title>ssl shake hands error, certification failed to verify and Cisco Umbrella</title><link>https://joejztang.github.io/posts/ssl-shake-hands-error-certification-failed-to-verify-and-cisco-umbrella/</link><pubDate>Thu, 30 Apr 2020 17:47:51 +0000</pubDate><guid>https://joejztang.github.io/posts/ssl-shake-hands-error-certification-failed-to-verify-and-cisco-umbrella/</guid><description>&lt;h2 id="a-story"&gt;
 A story
 &lt;a class="heading-link" href="#a-story"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;just a couple of days ago, I noticed that my pip in wsl was timing out. some very specific error message would be&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by &amp;lsquo;SSLError(SSLError(&amp;ldquo;bad handshake: Error([(&amp;lsquo;SSL routines&amp;rsquo;, &amp;rsquo;tls_process_server_certificate&amp;rsquo;, &amp;lsquo;certificate verify failed&amp;rsquo;)])&amp;rdquo;))&amp;rsquo;: /packages/15/8e/4fbc92846184e1080af77da38d55928a5486e0bc5e2ec8342c7db378d7f1/pip_install_test-0.5-py3-none-any.whl&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;have tried &lt;code&gt;pip install --trusted-host ...&lt;/code&gt;, it didn&amp;rsquo;t work.&lt;/p&gt;
&lt;h2 id="a-time-really-dont-know-whats-going-on"&gt;
 a time really don&amp;rsquo;t know what&amp;rsquo;s going on
 &lt;a class="heading-link" href="#a-time-really-dont-know-whats-going-on"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;searched on internet, tried recipe that people wrote, didn&amp;rsquo;t work and asked for help from my teammate.&lt;/p&gt;</description></item><item><title>aws cheating sheet</title><link>https://joejztang.github.io/posts/aws-cheating-sheet/</link><pubDate>Fri, 17 Apr 2020 15:58:52 +0000</pubDate><guid>https://joejztang.github.io/posts/aws-cheating-sheet/</guid><description>&lt;p&gt;Before anything, amazon always set minimum permissions generally.&lt;/p&gt;
&lt;h2 id="region-and-availability-zone"&gt;
 region and availability zone
 &lt;a class="heading-link" href="#region-and-availability-zone"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A region is a physical location in the world which combines two or more availability zones.&lt;/li&gt;
&lt;li&gt;zone is &lt;strong&gt;one or more discrete data centers&lt;/strong&gt; each with redundant power networking connectivity housed in&lt;/li&gt;
&lt;li&gt;edge locations are endpoints for AWS which are used for caching content. like cloudflare and other CDN services.&lt;/li&gt;
&lt;li&gt;vpc(virtual private cloud): a networking service which is a logically isolated section of the AWS Cloud where you can launch AWS resources in a virtual network&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="iam-identity-administrating-management"&gt;
 IAM (identity administrating management)
 &lt;a class="heading-link" href="#iam-identity-administrating-management"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IAM is universal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;root account&lt;/code&gt; is the account created when first setup the aws console, it has the admin access&lt;/li&gt;
&lt;li&gt;no users have permission when first created&lt;/li&gt;
&lt;li&gt;new users are assigned &lt;strong&gt;Access Key ID &amp;amp; Secret Access Keys&lt;/strong&gt; when first created&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access Key ID &amp;amp; Scret Access Keys&lt;/strong&gt; are used to programaticaly access AWS console, and they only got viewed &lt;strong&gt;Once&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;always setup multi factor authentication (MFA) on your root account&lt;/li&gt;
&lt;li&gt;you can create you only password rotation policy and many other policies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="iam-roles"&gt;
 IAM roles
 &lt;a class="heading-link" href="#iam-roles"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;aws doesn&amp;rsquo;t recommend using &lt;code&gt;aws_access_key_id&lt;/code&gt; and &lt;code&gt;aws_secret_access_key&lt;/code&gt; to use aws command line.
it&amp;rsquo;s much more secure to use IAM roles&lt;/p&gt;</description></item><item><title>why there is inverse of a matrix and why it's important</title><link>https://joejztang.github.io/posts/why-there-is-inverse-of-a-matrix-and-why-its-important/</link><pubDate>Tue, 10 Mar 2020 12:21:21 +0000</pubDate><guid>https://joejztang.github.io/posts/why-there-is-inverse-of-a-matrix-and-why-its-important/</guid><description>&lt;p&gt;Alert: this is not an explanatory post of inverse matrix&lt;/p&gt;
&lt;p&gt;Back to school when I learned linear algebra, there was always an ultimate question that I asked and I didn&amp;rsquo;t find an answer: why there is inverse matrix?It seems so simple and so silly and so trivial until I didn&amp;rsquo;t do well in my final lol.&lt;/p&gt;
&lt;p&gt;So why there is a thing called inverse matrix?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go back to real number system first&lt;/p&gt;</description></item><item><title>graph 概念及总结</title><link>https://joejztang.github.io/posts/graph-%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 02 Feb 2020 15:31:09 +0000</pubDate><guid>https://joejztang.github.io/posts/graph-%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%80%BB%E7%BB%93/</guid><description>&lt;h2 id="概念"&gt;
 概念
 &lt;a class="heading-link" href="#%e6%a6%82%e5%bf%b5"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;vertex 点; edge 线&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;v1 -&amp;gt; v2, v3, &amp;hellip; (被 vertex 指到的 v), 这里指的是 v2, v3, 被称为 v1 的 successors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;v1 -&amp;gt; v2, v3, &amp;hellip; ( 指向 v2, v3 的 v), 这里指的是 v1, 被称为 v2, v3 的 predecessors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;out degree: 从 vertex 指出去的箭头个数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in degree: 从别的 v 指向当前 v 的箭头个数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;degree: 与 v 的连线总数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;degree 在解题上有很大的用处. 比如: 如果图和树结合的题目, 当 out degree 为0 时,我们就能认定他是 leaf.&lt;/p&gt;</description></item><item><title>deep learning image recognization abstract</title><link>https://joejztang.github.io/posts/deep-learning-image-recog-bastract/</link><pubDate>Wed, 02 Oct 2019 14:33:30 +0000</pubDate><guid>https://joejztang.github.io/posts/deep-learning-image-recog-bastract/</guid><description>&lt;p&gt;this post is mainly focus on image recognizaton.&lt;/p&gt;
&lt;h2 id="traslation-invariance"&gt;
 traslation invariance
 &lt;a class="heading-link" href="#traslation-invariance"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;neural network will recognize traditional images for sure. but what if our target image is very small and at the left top corner?&lt;/p&gt;
&lt;p&gt;in this case, neural network will not be so helpful.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;when a machine learning model can recognize an object no matter whether it is moved (or &lt;em&gt;translated&lt;/em&gt;) in the image.&lt;/p&gt;</description></item><item><title>elasticsearch cheating sheet</title><link>https://joejztang.github.io/posts/elasticsearch-cheating-sheet/</link><pubDate>Tue, 01 Oct 2019 14:03:03 +0000</pubDate><guid>https://joejztang.github.io/posts/elasticsearch-cheating-sheet/</guid><description>&lt;h2 id="concepts"&gt;
 concepts
 &lt;a class="heading-link" href="#concepts"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cluster: a collection of nodes&lt;/li&gt;
&lt;li&gt;node: part to store data&lt;/li&gt;
&lt;li&gt;index: a collection of similar documents&lt;/li&gt;
&lt;li&gt;type: a category or a partition of indexes&lt;/li&gt;
&lt;li&gt;document: json formated data&lt;/li&gt;
&lt;li&gt;shard/replica: shard of a &lt;strong&gt;portion&lt;/strong&gt; of indexes, whereas replica is a segment of an index.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://joejztang.github.io/images/visual-es-concepts.PNG" alt="concepts visual"&gt;&lt;/p&gt;
&lt;h2 id="roles-of-node"&gt;
 roles of node
 &lt;a class="heading-link" href="#roles-of-node"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;master&lt;/li&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;ingest: it somewhat like simplified &lt;code&gt;logstash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;by default, it&amp;rsquo;s &lt;code&gt;dim&lt;/code&gt; permission. for different size of cluster, especially medium and large size, we could have dedicated master nodes.&lt;/p&gt;</description></item><item><title>essential training on apache spark</title><link>https://joejztang.github.io/posts/essential-training-on-apache-spark/</link><pubDate>Tue, 03 Sep 2019 14:39:31 +0000</pubDate><guid>https://joejztang.github.io/posts/essential-training-on-apache-spark/</guid><description>&lt;h2 id="two-insteresting-points-gonna-record-in-this-post"&gt;
 two insteresting points gonna record in this post
 &lt;a class="heading-link" href="#two-insteresting-points-gonna-record-in-this-post"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MLlib&lt;/li&gt;
&lt;li&gt;real-time data analysis with spark streaming&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mllib"&gt;
 MLlib
 &lt;a class="heading-link" href="#mllib"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MLlib&lt;/code&gt; is handy that just simply import module and then use it.&lt;/p&gt;
&lt;p&gt;worth metioning root-mean-squared error, aka RMSE, using this error we can compare two predictions with each other. if RMSE is similiar, then two predictions are about the same in accuracy.&lt;/p&gt;</description></item><item><title>common table expression (CTE) and the recursion</title><link>https://joejztang.github.io/posts/common-table-expression-cte-and-the-recursion/</link><pubDate>Tue, 27 Aug 2019 14:05:21 +0000</pubDate><guid>https://joejztang.github.io/posts/common-table-expression-cte-and-the-recursion/</guid><description>&lt;h2 id="introduction-to-cte"&gt;
 introduction to CTE
 &lt;a class="heading-link" href="#introduction-to-cte"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A CTE (Common Table Expression) is temporary result set that you can reference within another SELECT, INSERT, UPDATE, or DELETE statement.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;to give you a visual example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;WITH&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;CTE&lt;span style="color:#6e7681"&gt; &lt;/span&gt;(param1,&lt;span style="color:#6e7681"&gt; &lt;/span&gt;param2)&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;AS&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;(&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;some&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;fancy&lt;span style="color:#6e7681"&gt; &lt;/span&gt;query&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;&lt;/span&gt;)&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;previous to this post, I always called it &amp;lsquo;with block&amp;rsquo;, right now I am calling it &lt;code&gt;common table expression&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="cte-details"&gt;
 CTE details
 &lt;a class="heading-link" href="#cte-details"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;let&amp;rsquo;s see an example&lt;/p&gt;</description></item><item><title>fluentd cheating sheet</title><link>https://joejztang.github.io/posts/fluentd-cheating-sheet/</link><pubDate>Wed, 07 Aug 2019 10:47:40 +0000</pubDate><guid>https://joejztang.github.io/posts/fluentd-cheating-sheet/</guid><description>&lt;h2 id="installation"&gt;
 installation
 &lt;a class="heading-link" href="#installation"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;can be found online.&lt;/p&gt;
&lt;h2 id="config-file"&gt;
 config file
 &lt;a class="heading-link" href="#config-file"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id="list-of-directives"&gt;
 list of directives
 &lt;a class="heading-link" href="#list-of-directives"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;source&lt;/strong&gt;: determine input source&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;must include &lt;code&gt;@type&lt;/code&gt; parameter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;match&lt;/strong&gt;: determine output destinations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;filter&lt;/strong&gt;: determine pipelines&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a typical pipeline is like this: &lt;code&gt;Input -&amp;gt; Filter1 -&amp;gt; Filter2 ... -&amp;gt; Output&lt;/code&gt;, in &lt;code&gt;config&lt;/code&gt; file is like&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;lt;match&amp;gt;&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;system: directives set system wide configuration&lt;/p&gt;</description></item><item><title>jenkins setup for hexo auto deploy</title><link>https://joejztang.github.io/posts/jenkins-setup-for-hexo-auto-deploy/</link><pubDate>Mon, 15 Jul 2019 15:54:20 +0000</pubDate><guid>https://joejztang.github.io/posts/jenkins-setup-for-hexo-auto-deploy/</guid><description>&lt;h1 id="what-did-i-do-before"&gt;
 what did I do before
 &lt;a class="heading-link" href="#what-did-i-do-before"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://joejztang.github.io/2019/02/22/%E8%BF%9F%E5%88%B0%E7%9A%84jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/" class="external-link" target="_blank" rel="noopener"&gt;this&lt;/a&gt; is what I did before. and with the capacity of vm being relative small (hexo is memory consuming!!!), have to recreate my vm.&lt;/p&gt;
&lt;h1 id="about-aws"&gt;
 about aws
 &lt;a class="heading-link" href="#about-aws"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;I used aws as jenkins host. aws seems quicky to me because sometimes I got no permission sign in again to vm, even though I got the private key.&lt;/p&gt;</description></item><item><title>quickly deploy in test and prod environment</title><link>https://joejztang.github.io/posts/quickly-deploy-in-test-and-prod-environment/</link><pubDate>Thu, 11 Jul 2019 15:55:12 +0000</pubDate><guid>https://joejztang.github.io/posts/quickly-deploy-in-test-and-prod-environment/</guid><description>&lt;p&gt;recently, I wrote python application a lot. sometimes it is nice to quickly switching running pattern between test mode and prod mode, or raise a debug flag to see debug messages.&lt;/p&gt;
&lt;p&gt;previously, I don&amp;rsquo;t really have a systematic way doing that, but recently, I thought I should probably have one in case of future using.&lt;/p&gt;
&lt;p&gt;so my thoughts on this problem is like this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;embedded some point in functions that you can using as switching mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for example, in production time you need to download 20 tables each batch, and probably you only need to download 3 when you just want to test if it is working.&lt;/p&gt;</description></item><item><title>about python logging</title><link>https://joejztang.github.io/posts/about-python-logging/</link><pubDate>Thu, 11 Jul 2019 13:52:38 +0000</pubDate><guid>https://joejztang.github.io/posts/about-python-logging/</guid><description>&lt;h1 id="logging-basics"&gt;
 logging basics
 &lt;a class="heading-link" href="#logging-basics"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;logging&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;basicConfig(filename&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;#39;example.log&amp;#39;&lt;/span&gt;,level&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;logging&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;DEBUG)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;logging&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;debug(&lt;span style="color:#a5d6ff"&gt;&amp;#39;this is a debug msg&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;logging&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;info(&lt;span style="color:#a5d6ff"&gt;&amp;#39;this is an info msg&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;logging&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;warning(&lt;span style="color:#a5d6ff"&gt;&amp;#39;this is a warning msg&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;recommend reading &lt;a href="https://docs.python.org/3/howto/logging.html#logging-basic-tutorial" class="external-link" target="_blank" rel="noopener"&gt;official tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="more-thinking-how-to-log-from-different-module-in-the-same-log-file"&gt;
 more thinking: how to log from different module in the same log file?
 &lt;a class="heading-link" href="#more-thinking-how-to-log-from-different-module-in-the-same-log-file"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;it gave me a headache at first. and I tried importing &lt;code&gt;logging&lt;/code&gt; module in each module and log in the same file. it works somehow but with issues.&lt;/p&gt;</description></item><item><title>how to get sql server's ip address</title><link>https://joejztang.github.io/posts/how-to-get-sql-servers-ip-address/</link><pubDate>Mon, 08 Jul 2019 16:08:44 +0000</pubDate><guid>https://joejztang.github.io/posts/how-to-get-sql-servers-ip-address/</guid><description>&lt;p&gt;query that you can use to get microsoft sql server&amp;rsquo;s ip address: (funny that I cannot find it in properties or something like that.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;SELECT&lt;/span&gt;&lt;span style="color:#6e7681"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;CONNECTIONPROPERTY(&lt;span style="color:#a5d6ff"&gt;&amp;#39;net_transport&amp;#39;&lt;/span&gt;)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;AS&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;net_transport,&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;CONNECTIONPROPERTY(&lt;span style="color:#a5d6ff"&gt;&amp;#39;protocol_type&amp;#39;&lt;/span&gt;)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;AS&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;protocol_type,&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;CONNECTIONPROPERTY(&lt;span style="color:#a5d6ff"&gt;&amp;#39;auth_scheme&amp;#39;&lt;/span&gt;)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;AS&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;auth_scheme,&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;CONNECTIONPROPERTY(&lt;span style="color:#a5d6ff"&gt;&amp;#39;local_net_address&amp;#39;&lt;/span&gt;)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;AS&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;local_net_address,&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;CONNECTIONPROPERTY(&lt;span style="color:#a5d6ff"&gt;&amp;#39;local_tcp_port&amp;#39;&lt;/span&gt;)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;AS&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;local_tcp_port,&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;CONNECTIONPROPERTY(&lt;span style="color:#a5d6ff"&gt;&amp;#39;client_net_address&amp;#39;&lt;/span&gt;)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;AS&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;client_net_address&lt;span style="color:#6e7681"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="credit-to"&gt;
 credit to
 &lt;a class="heading-link" href="#credit-to"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/142142/sql-query-to-get-servers-ip-address" class="external-link" target="_blank" rel="noopener"&gt;query to get server ip&amp;rsquo;s address&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>R-cheat-sheet</title><link>https://joejztang.github.io/posts/r-cheat-sheet/</link><pubDate>Wed, 19 Jun 2019 13:48:16 +0000</pubDate><guid>https://joejztang.github.io/posts/r-cheat-sheet/</guid><description>&lt;p&gt;to me, R is a little bit quirky.&lt;/p&gt;
&lt;h2 id="installation-and-execution"&gt;
 installation and execution
 &lt;a class="heading-link" href="#installation-and-execution"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-R" data-lang="R"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;$&lt;/span&gt; sudo apt install r&lt;span style="color:#ff7b72;font-weight:bold"&gt;-&lt;/span&gt;base&lt;span style="color:#ff7b72;font-weight:bold"&gt;-&lt;/span&gt;core
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="open-command-prompt"&gt;
 open command prompt
 &lt;a class="heading-link" href="#open-command-prompt"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-R" data-lang="R"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;$&lt;/span&gt; R
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="run-script-in-command-line"&gt;
 run script in command line
 &lt;a class="heading-link" href="#run-script-in-command-line"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-R" data-lang="R"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;$&lt;/span&gt; Rscript &lt;span style="color:#ff7b72;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;awesome_test.R&lt;span style="color:#ff7b72;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="r-objects"&gt;
 R-objects
 &lt;a class="heading-link" href="#r-objects"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;there are many type of R-objects, including&lt;/p&gt;
&lt;h3 id="vectorsatomic-vector"&gt;
 vectors/atomic vector
 &lt;a class="heading-link" href="#vectorsatomic-vector"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;atomic vector is a vector with a single object, like &lt;code&gt;v&amp;lt;-TRUE&lt;/code&gt; is a &lt;strong&gt;atomic vector&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>graph-theory-cheat-sheet</title><link>https://joejztang.github.io/posts/graph-theory-cheat-sheet/</link><pubDate>Tue, 18 Jun 2019 16:41:28 +0000</pubDate><guid>https://joejztang.github.io/posts/graph-theory-cheat-sheet/</guid><description>&lt;h2 id="basic-concepts"&gt;
 basic concepts
 &lt;a class="heading-link" href="#basic-concepts"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Vertices - &lt;strong&gt;V&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Edges - &lt;strong&gt;E&lt;/strong&gt;, can be represented as {u, v}&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="path-and-walk"&gt;
 path and walk
 &lt;a class="heading-link" href="#path-and-walk"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A path is an ordered sequence of edges that are distinct from one other.&lt;/li&gt;
&lt;li&gt;A walk is a sequence of vertices, such that any two consecutive vertices form an edge in the graph. eg: v1, v2, v4, v2 is a walk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;the difference of above two is the same edge &lt;strong&gt;cannot appear twice in a path&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description></item><item><title>attemped-relative-import-with-no-parent-package</title><link>https://joejztang.github.io/posts/attempted-relative-import-with-no-parent-package/</link><pubDate>Fri, 14 Jun 2019 13:04:56 +0000</pubDate><guid>https://joejztang.github.io/posts/attempted-relative-import-with-no-parent-package/</guid><description>&lt;p&gt;I created a project using python and happily finished implementing functions with following structure.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;- project
 |
 - pipelines
 | |
 | - functions.py
 |
 - tests
 |
 - unittest.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I created unittest/integration test and then I saw this exception&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Traceback &lt;span style="color:#ff7b72;font-weight:bold"&gt;(&lt;/span&gt;most recent call last&lt;span style="color:#ff7b72;font-weight:bold"&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; File &lt;span style="color:#a5d6ff"&gt;&amp;#34;/home/xxxx/anaconda3/lib/python3.7/unittest/loader.py&amp;#34;&lt;/span&gt;, line 154, in loadTestsFromName
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#79c0ff"&gt;module&lt;/span&gt; &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; __import__&lt;span style="color:#ff7b72;font-weight:bold"&gt;(&lt;/span&gt;module_name&lt;span style="color:#ff7b72;font-weight:bold"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; File &lt;span style="color:#a5d6ff"&gt;&amp;#34;/home/xxxx/datascience.my-project/test/test-unittest.py&amp;#34;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; from .my_great_script import queryer
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ImportError: attempted relative import with no known parent package
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;i was so frustrated.&lt;/p&gt;</description></item><item><title>elk single node</title><link>https://joejztang.github.io/posts/elk-single-node/</link><pubDate>Mon, 10 Jun 2019 17:19:40 +0000</pubDate><guid>https://joejztang.github.io/posts/elk-single-node/</guid><description>&lt;h2 id="introduction"&gt;
 introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;os: ubuntu 14.04&lt;/li&gt;
&lt;li&gt;elasticsearch: 2.2.x&lt;/li&gt;
&lt;li&gt;logstash: 2.2.x&lt;/li&gt;
&lt;li&gt;kibana: 4.5.x&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;what does it like for ELK stack&lt;/p&gt;
&lt;p&gt;&lt;img src="https://joejztang.github.io/images/elk.png" alt="elk"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client servers installed with filebeat sends logs to elk server&lt;/li&gt;
&lt;li&gt;elk/logstash server process and index log, store logs, search and visualize and using nginx to do reverse proxy&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="installations"&gt;
 installations
 &lt;a class="heading-link" href="#installations"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id="install-java-8"&gt;
 install java 8
 &lt;a class="heading-link" href="#install-java-8"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo add-apt-repository -y ppa:webupd8team/java
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt-get -y install oracle-java8-installer
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="install-elasticsearch"&gt;
 install elasticsearch
 &lt;a class="heading-link" href="#install-elasticsearch"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#a5d6ff"&gt;&amp;#34;deb http://packages.elastic.co/elasticsearch/2.x/debian stable main&amp;#34;&lt;/span&gt; | sudo tee -a /etc/apt/sources.list.d/elasticsearch-2.x.list
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt-get install -y elasticsearch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;elasticsearch is installed, now configurations.&lt;/p&gt;</description></item><item><title>python-unittest-mock</title><link>https://joejztang.github.io/posts/python-unittest-mock/</link><pubDate>Thu, 06 Jun 2019 15:42:00 +0000</pubDate><guid>https://joejztang.github.io/posts/python-unittest-mock/</guid><description>&lt;p&gt;recently, i started to write unittest for python applications. because what i did is data pipeline, i will use a lot of mocking and patching. this post is for recording purposes.&lt;/p&gt;
&lt;p&gt;unittest framework is MUCH MORE POWERFUL than I expected. so let me talked about a little bit about &lt;code&gt;unittest&lt;/code&gt; framework itself first.&lt;/p&gt;
&lt;h2 id="mock"&gt;
 &lt;code&gt;Mock&lt;/code&gt;
 &lt;a class="heading-link" href="#mock"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;this is one powerful object that unittest provides. basically, one can use &lt;code&gt;mock = Mock()&lt;/code&gt; to &amp;lsquo;fake&amp;rsquo; any object that you want to replace.&lt;/p&gt;</description></item><item><title>nginx-bind-to-fails</title><link>https://joejztang.github.io/posts/nginx-bind-to-fails/</link><pubDate>Wed, 05 Jun 2019 20:32:04 +0000</pubDate><guid>https://joejztang.github.io/posts/nginx-bind-to-fails/</guid><description>&lt;p&gt;as a beginer of nginx, one must has met this error&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[emerg]: bind() to 0.0.0.0:80 failed (98: Address already in use)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;this means some other process is using port 80.&lt;/p&gt;
&lt;p&gt;it also implies one should kill these processes.&lt;/p&gt;
&lt;p&gt;using&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo fuser -k 80/tcp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;then restart nginx&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo service nginx restart&lt;/code&gt;&lt;/p&gt;</description></item><item><title>what i think about switching db seamlessly on the fly</title><link>https://joejztang.github.io/posts/what-i-think-about-switching-db-seamlessly-on-the-fly/</link><pubDate>Fri, 03 May 2019 10:36:15 +0000</pubDate><guid>https://joejztang.github.io/posts/what-i-think-about-switching-db-seamlessly-on-the-fly/</guid><description>&lt;h2 id="problem-description"&gt;
 problem description
 &lt;a class="heading-link" href="#problem-description"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;it is pretty simple I guess. I have an application which read data from a mongodb. every sunday I will just simply flush the db and update it using an updater.
by doing so, I introduce 3 hours down time/inconsistency time. I want to minimize it.&lt;/p&gt;
&lt;h2 id="what-i-researched"&gt;
 what I researched
 &lt;a class="heading-link" href="#what-i-researched"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id="mongodb-replication"&gt;
 mongodb replication
 &lt;a class="heading-link" href="#mongodb-replication"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;in general, db repliaction is the process of storing data in more than one site or node. by doing so it improves the availability of data. at the same time, it also raises the problem of how to maintain consistency of data. it related to distributed system though.&lt;/p&gt;</description></item><item><title>python underscore naming patterns summary</title><link>https://joejztang.github.io/posts/python-underscore-naming-patterns-summary/</link><pubDate>Fri, 26 Apr 2019 17:31:12 +0000</pubDate><guid>https://joejztang.github.io/posts/python-underscore-naming-patterns-summary/</guid><description>&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Pattern&lt;/th&gt;
 &lt;th&gt;Example&lt;/th&gt;
 &lt;th&gt;Meaning&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Single Leading Underscore&lt;/td&gt;
 &lt;td&gt;_var&lt;/td&gt;
 &lt;td&gt;Naming convention indicating a name is meant for internal use. Generally not enforced by the Python interpreter (except in wildcard imports) and meant as a hint to the programmer only.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Single Trailing Underscore&lt;/td&gt;
 &lt;td&gt;var_&lt;/td&gt;
 &lt;td&gt;Used by convention to avoid naming conflicts with Python keywords.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Double Leading Underscore&lt;/td&gt;
 &lt;td&gt;__var&lt;/td&gt;
 &lt;td&gt;Triggers name mangling when used in a class context. Enforced by the Python interpreter.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Double Leading and Trailing Underscore&lt;/td&gt;
 &lt;td&gt;__var__&lt;/td&gt;
 &lt;td&gt;Indicates special methods defined by the Python language. Avoid this naming scheme for your own attributes.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Single Underscore&lt;/td&gt;
 &lt;td&gt;_&lt;/td&gt;
 &lt;td&gt;Sometimes used as a name for temporary or insignificant variables (“don’t care”). Also: The result of the last expression in a Python REPL.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="credit-to"&gt;
 credit to
 &lt;a class="heading-link" href="#credit-to"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://dbader.org/blog/meaning-of-underscores-in-python" class="external-link" target="_blank" rel="noopener"&gt;The Meaning of Underscores in Python&lt;/a&gt;&lt;/p&gt;</description></item><item><title>introduction to kubernetes</title><link>https://joejztang.github.io/posts/introduction-to-kubernetes/</link><pubDate>Fri, 19 Apr 2019 16:54:16 +0000</pubDate><guid>https://joejztang.github.io/posts/introduction-to-kubernetes/</guid><description>&lt;h2 id="kubernetes-architecture"&gt;
 kubernetes architecture
 &lt;a class="heading-link" href="#kubernetes-architecture"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;one or more master nodes&lt;/li&gt;
&lt;li&gt;one or more worker nodes&lt;/li&gt;
&lt;li&gt;distributed key - value storage (for state purposes)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="master-nodes"&gt;
 master nodes
 &lt;a class="heading-link" href="#master-nodes"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;master nodes are entry point for administrative tasks. if there are more master nodes, then it would be in HA (high availability) mode.&lt;/p&gt;
&lt;p&gt;in this time, one of them is a &amp;rsquo;leader&amp;rsquo; and others are followers.&lt;/p&gt;</description></item><item><title>common-unix-commands</title><link>https://joejztang.github.io/posts/common-unix-commands/</link><pubDate>Mon, 01 Apr 2019 10:32:39 +0000</pubDate><guid>https://joejztang.github.io/posts/common-unix-commands/</guid><description>&lt;ol&gt;
&lt;li&gt;Archives (compress, extract and so on)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar cvf archive_name.tar dirname/ &lt;span style="color:#8b949e;font-style:italic"&gt;# create a new tar archive named archive_name by packing all stuff from dirname&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar xvf archive_name.tar &lt;span style="color:#8b949e;font-style:italic"&gt;# extracting from existing tar archive&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar tvf archive_name.tar &lt;span style="color:#8b949e;font-style:italic"&gt;# view an existing tar archive&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;&lt;code&gt;grep&lt;/code&gt; command&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;grep -i &lt;span style="color:#a5d6ff"&gt;&amp;#34;the&amp;#34;&lt;/span&gt; demo_file &lt;span style="color:#8b949e;font-style:italic"&gt;# search for a given string in a file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;grep -r &lt;span style="color:#a5d6ff"&gt;&amp;#34;ramesh&amp;#34;&lt;/span&gt; * &lt;span style="color:#8b949e;font-style:italic"&gt;# search for a given string in all files RECURSIVELY&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;find -iname &lt;span style="color:#a5d6ff"&gt;&amp;#34;MyProgram.c&amp;#34;&lt;/span&gt; &lt;span style="color:#8b949e;font-style:italic"&gt;# find files using file-name(case in-sensitive)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;find -iname &lt;span style="color:#a5d6ff"&gt;&amp;#34;MyCProgram.c&amp;#34;&lt;/span&gt; -exec md5sum &lt;span style="color:#ff7b72;font-weight:bold"&gt;{}&lt;/span&gt; &lt;span style="color:#79c0ff"&gt;\;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="4"&gt;
&lt;li&gt;&lt;code&gt;sed&lt;/code&gt; &amp;ndash; Stream editor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;when copy a DOS file to Unix, one could probably find &lt;code&gt;\r\n&lt;/code&gt; at the end of each line. the following command converts the DOS file formate to Unix file format using sed command&lt;/p&gt;</description></item><item><title>pandasg roupby vs index</title><link>https://joejztang.github.io/posts/pandas-groupby-vs-index/</link><pubDate>Tue, 19 Mar 2019 16:33:08 +0000</pubDate><guid>https://joejztang.github.io/posts/pandas-groupby-vs-index/</guid><description>&lt;h2 id="groupby-in-pandas"&gt;
 groupby in pandas
 &lt;a class="heading-link" href="#groupby-in-pandas"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;It returns a &lt;code&gt;Groupby Object&lt;/code&gt; to us. Whatever &lt;code&gt;Groupby Object&lt;/code&gt; it is, we don&amp;rsquo;t care, it is basically a dictionary that maps your index to array of row numbers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any groupby operation involves one of the following operations on the original object. They are −&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Splitting the Object&lt;/li&gt;
&lt;li&gt;Applying a function&lt;/li&gt;
&lt;li&gt;Combining the results&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In many situations, we split the data into sets and we apply some functionality on each subset. In the apply functionality, we can perform the following operations −&lt;/p&gt;</description></item><item><title>anaconda python venv environment mess</title><link>https://joejztang.github.io/posts/anaconda-python-environment-mess/</link><pubDate>Thu, 14 Mar 2019 16:47:26 +0000</pubDate><guid>https://joejztang.github.io/posts/anaconda-python-environment-mess/</guid><description>&lt;p&gt;I have encountered an strange issue today, and want to record it in case I met it again or others who find it is helpful.&lt;/p&gt;
&lt;h2 id="intro-anaconda"&gt;
 intro: anaconda
 &lt;a class="heading-link" href="#intro-anaconda"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;It is so famous that almost everyone that code with python knows it. (if you don&amp;rsquo;t know that, please search and get familiar with it, very helpful) it provides python version control so that you don&amp;rsquo;t worries about install so many versions of python and mess up system.&lt;/p&gt;</description></item><item><title>git-cheating-sheet</title><link>https://joejztang.github.io/posts/git-cheating-sheet/</link><pubDate>Fri, 01 Mar 2019 17:40:26 +0000</pubDate><guid>https://joejztang.github.io/posts/git-cheating-sheet/</guid><description>&lt;h2 id="backtracking"&gt;
 backtracking
 &lt;a class="heading-link" href="#backtracking"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id="unmodifying"&gt;
 unmodifying
 &lt;a class="heading-link" href="#unmodifying"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;before backtrack, show details of changes by using&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git show HEAD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;then, I made some changes to this file and then I realize that I did a silly thing.&lt;/p&gt;
&lt;p&gt;I need to be back!!!&lt;/p&gt;
&lt;p&gt;what I do is the following: &lt;code&gt;git checkout HEAD &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then you can check git status, it back to the last commit.&lt;/p&gt;</description></item><item><title>why mock? a general question</title><link>https://joejztang.github.io/posts/why-mock-a-general-question/</link><pubDate>Thu, 28 Feb 2019 14:11:03 +0000</pubDate><guid>https://joejztang.github.io/posts/why-mock-a-general-question/</guid><description>&lt;h2 id="what-is-mock"&gt;
 what is mock?
 &lt;a class="heading-link" href="#what-is-mock"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;as it implies, it is a object that pretend it being something else.&lt;/p&gt;
&lt;h2 id="why-we-want-to-mock"&gt;
 why we want to mock?
 &lt;a class="heading-link" href="#why-we-want-to-mock"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Assume that we want to test a function. Let&amp;rsquo;s call it &lt;code&gt;count_all_after_connection(connection)&lt;/code&gt;. It consumed a parameter called &lt;code&gt;connection&lt;/code&gt;, and this connection is not available so far(possibly because of not having access yet).&lt;/p&gt;
&lt;p&gt;But you still want to test it, but how?&lt;/p&gt;</description></item><item><title>apache-beam-intro</title><link>https://joejztang.github.io/posts/apache-beam-intro/</link><pubDate>Wed, 27 Feb 2019 14:38:39 +0000</pubDate><guid>https://joejztang.github.io/posts/apache-beam-intro/</guid><description>&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/43796046/explain-apache-beam-python-syntax" class="external-link" target="_blank" rel="noopener"&gt;Don&amp;rsquo;t feel afraid of &amp;lsquo;fancy&amp;rsquo; syntax of Apache Beam Python&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="basic-concepts"&gt;
 Basic Concepts
 &lt;a class="heading-link" href="#basic-concepts"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id="pipelines"&gt;
 pipelines
 &lt;a class="heading-link" href="#pipelines"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A pipeline encapsulates the entire series of computations involved in reading input data, transforming that data, and writing output data. The input source and output sink can be the same or of different types, allowing you to convert data from one format to another. Apache Beam programs start by constructing a Pipeline object, and then using that object as the basis for creating the pipeline&amp;rsquo;s datasets. Each pipeline represents a single, repeatable job.&lt;/p&gt;</description></item><item><title>sql-server-cheating-sheet</title><link>https://joejztang.github.io/posts/sql-server-cheating-sheet/</link><pubDate>Wed, 27 Feb 2019 14:11:26 +0000</pubDate><guid>https://joejztang.github.io/posts/sql-server-cheating-sheet/</guid><description>&lt;h2 id="overpartition-by--vs-group-by"&gt;
 OVER(PARTITION BY &amp;hellip;) VS. GROUP BY
 &lt;a class="heading-link" href="#overpartition-by--vs-group-by"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;group by comes with aggregate functions. they appear in pairs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;group by ~= partition by&lt;/strong&gt;, group by will return &lt;strong&gt;one row per group&lt;/strong&gt; of many groups, however partition by will return &lt;strong&gt;one row per underlying row, not one per group.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="schema"&gt;
 Schema
 &lt;a class="heading-link" href="#schema"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;schema can be used to control the accesses.&lt;/p&gt;</description></item><item><title>c sharp cheating sheet</title><link>https://joejztang.github.io/posts/c-sharp-cheating-sheet/</link><pubDate>Wed, 27 Feb 2019 12:59:41 +0000</pubDate><guid>https://joejztang.github.io/posts/c-sharp-cheating-sheet/</guid><description>&lt;h2 id="dll-vs-exe"&gt;
 DLL vs EXE
 &lt;a class="heading-link" href="#dll-vs-exe"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Dynamic Linked Library, cannot run individually.
Executable file have Main function.&lt;/p&gt;
&lt;h2 id="naming-conventions"&gt;
 Naming Conventions
 &lt;a class="heading-link" href="#naming-conventions"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Object Name&lt;/th&gt;
 &lt;th&gt;Notation&lt;/th&gt;
 &lt;th&gt;Length&lt;/th&gt;
 &lt;th&gt;Plural&lt;/th&gt;
 &lt;th&gt;Prefix&lt;/th&gt;
 &lt;th&gt;Suffix&lt;/th&gt;
 &lt;th&gt;Abbreviation&lt;/th&gt;
 &lt;th&gt;Char Mask&lt;/th&gt;
 &lt;th&gt;Underscores&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Class name&lt;/td&gt;
 &lt;td&gt;PascalCase&lt;/td&gt;
 &lt;td&gt;128&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;[A-z][0-9]&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Constructor name&lt;/td&gt;
 &lt;td&gt;PascalCase&lt;/td&gt;
 &lt;td&gt;128&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;[A-z][0-9]&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Method name&lt;/td&gt;
 &lt;td&gt;PascalCase&lt;/td&gt;
 &lt;td&gt;128&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;[A-z][0-9]&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Method arguments&lt;/td&gt;
 &lt;td&gt;camelCase&lt;/td&gt;
 &lt;td&gt;128&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;[A-z][0-9]&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Local variables&lt;/td&gt;
 &lt;td&gt;camelCase&lt;/td&gt;
 &lt;td&gt;50&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;[A-z][0-9]&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Constants name&lt;/td&gt;
 &lt;td&gt;PascalCase&lt;/td&gt;
 &lt;td&gt;50&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;[A-z][0-9]&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Field name&lt;/td&gt;
 &lt;td&gt;camelCase&lt;/td&gt;
 &lt;td&gt;50&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;[A-z][0-9]&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Properties name&lt;/td&gt;
 &lt;td&gt;PascalCase&lt;/td&gt;
 &lt;td&gt;50&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;[A-z][0-9]&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Delegate name&lt;/td&gt;
 &lt;td&gt;PascalCase&lt;/td&gt;
 &lt;td&gt;128&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;[A-z]&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Enum type name&lt;/td&gt;
 &lt;td&gt;PascalCase&lt;/td&gt;
 &lt;td&gt;128&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;[A-z]&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="fields-vs-properties"&gt;
 &lt;code&gt;fields&lt;/code&gt; vs &lt;code&gt;properties&lt;/code&gt;
 &lt;a class="heading-link" href="#fields-vs-properties"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;properties exposes fields. meaning properties have getter and setter whereas fields store actual data.&lt;/p&gt;</description></item><item><title>google dataflow introduction</title><link>https://joejztang.github.io/posts/google-dataflow-introduction/</link><pubDate>Wed, 27 Feb 2019 10:13:36 +0000</pubDate><guid>https://joejztang.github.io/posts/google-dataflow-introduction/</guid><description>&lt;h2 id="data-analytics-products"&gt;
 data analytics products
 &lt;a class="heading-link" href="#data-analytics-products"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://joejztang.github.io/images/data_trans_with_dataflow.png" alt="cloud_dataflow"&gt;&lt;/p&gt;
&lt;p&gt;cloud dataflow is a data pipeline that transform data from one form to another, as you can see in above paradiagm.&lt;/p&gt;
&lt;p&gt;according to what I read so far, dataflow build on top of &lt;strong&gt;apache beam&lt;/strong&gt;.&lt;/p&gt;</description></item><item><title>pandas cheat sheet</title><link>https://joejztang.github.io/posts/pandas-cheat-sheet/</link><pubDate>Mon, 25 Feb 2019 09:40:09 +0000</pubDate><guid>https://joejztang.github.io/posts/pandas-cheat-sheet/</guid><description>&lt;h2 id="dimension"&gt;
 dimension
 &lt;a class="heading-link" href="#dimension"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Data Structure&lt;/th&gt;
 &lt;th&gt;Dimensions&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Series&lt;/td&gt;
 &lt;td&gt;1&lt;/td&gt;
 &lt;td&gt;1d array&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Data Frames&lt;/td&gt;
 &lt;td&gt;2&lt;/td&gt;
 &lt;td&gt;2d array&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Panel&lt;/td&gt;
 &lt;td&gt;3&lt;/td&gt;
 &lt;td&gt;3d array&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Series: size immutable, data mutable&lt;/li&gt;
&lt;li&gt;Data Frames: size immutable, data mutable&lt;/li&gt;
&lt;li&gt;Panel: size mutable, data mutable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To sum, all the data structures are data mutable.&lt;/p&gt;
&lt;h2 id="data-structures"&gt;
 Data Structures
 &lt;a class="heading-link" href="#data-structures"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id="pandasseries"&gt;
 pandas.Series
 &lt;a class="heading-link" href="#pandasseries"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pandas.Series(data, index, dtype, copy)&lt;/code&gt;&lt;/p&gt;</description></item><item><title>迟到的jenkins自动部署</title><link>https://joejztang.github.io/posts/%E8%BF%9F%E5%88%B0%E7%9A%84jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</link><pubDate>Fri, 22 Feb 2019 14:12:26 +0000</pubDate><guid>https://joejztang.github.io/posts/%E8%BF%9F%E5%88%B0%E7%9A%84jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</guid><description>&lt;p&gt;用了hexo很久， 最近想要不止在自己的电脑上写博客， 每个电脑都能写。 然而hexo不支持， 所以想到了用jenkins配hexo。 当然jenkins可不是专门干这个的， jenkins可还有大用处。 我自己配置的时候遇见了很多坑， 如果遇见了一样的， 可以参考这篇帖子。 希望给你帮助。&lt;/p&gt;
&lt;h2 id="hexo配置"&gt;
 hexo配置
 &lt;a class="heading-link" href="#hexo%e9%85%8d%e7%bd%ae"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;由于我不太想要把自己的帖子source都暴露在网上， 所以我用了一个private repo。所有就有了如下的配置图&lt;/p&gt;
&lt;h2 id="配置图"&gt;
 配置图
 &lt;a class="heading-link" href="#%e9%85%8d%e7%bd%ae%e5%9b%be"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-配置图" data-lang="配置图"&gt;
hexo/source &amp;gt;------
 commit|
 |------&amp;gt; jenkins
 -----&amp;lt; hook &amp;amp;&amp;amp; logic
 |
 |
hexo/public &amp;lt;-------
 update
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="jenkins配置"&gt;
 jenkins配置
 &lt;a class="heading-link" href="#jenkins%e9%85%8d%e7%bd%ae"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;我把jenkins放在了aws上面。 之前很久就想要用ec2， 但是总是没有机会。 通过这次机会， 一并用了。我参考了这个&lt;a href="https://d1.awsstatic.com/Projects/P5505030/aws-project_Jenkins-build-server.pdf" class="external-link" target="_blank" rel="noopener"&gt;文件&lt;/a&gt;
当然， 折腾也开始了。&lt;/p&gt;
&lt;h3 id="host-name-is-not-ec2-user"&gt;
 host name is not ec2-user
 &lt;a class="heading-link" href="#host-name-is-not-ec2-user"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;不要用ssh去&lt;code&gt;ec2-user@xxxxxx.amazon.com&lt;/code&gt;， amazon不会创建ec2-user给你，用要用&lt;code&gt;ubuntu&lt;/code&gt;。&lt;/p&gt;</description></item><item><title>Union Find总结</title><link>https://joejztang.github.io/posts/union-find%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 22 Nov 2018 12:35:47 +0000</pubDate><guid>https://joejztang.github.io/posts/union-find%E6%80%BB%E7%BB%93/</guid><description>&lt;h1 id="什么是-union-find并查集"&gt;
 什么是 union find(并查集)
 &lt;a class="heading-link" href="#%e4%bb%80%e4%b9%88%e6%98%af-union-find%e5%b9%b6%e6%9f%a5%e9%9b%86"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;在计算机科学中，并查集是一种树型的数据结构，用于处理一些不交集（Disjoint Sets）的合并及查询问题
&amp;mdash; from Wikipedia&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id="union-find-适用于解决什么问题"&gt;
 union find 适用于解决什么问题
 &lt;a class="heading-link" href="#union-find-%e9%80%82%e7%94%a8%e4%ba%8e%e8%a7%a3%e5%86%b3%e4%bb%80%e4%b9%88%e9%97%ae%e9%a2%98"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;给出节点, 判断他们是否联通, &lt;!-- raw HTML omitted --&gt;并且不需要给出具体路径.&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果需要判断是否联通, &lt;!-- raw HTML omitted --&gt;并且&lt;!-- raw HTML omitted --&gt;需要&lt;!-- raw HTML omitted --&gt;给出具体路径&lt;!-- raw HTML omitted --&gt;, 那么就需要用 BFS 或者 DFS 来解决了.&lt;/p&gt;
&lt;h2 id="union-find-的应用"&gt;
 union find 的应用
 &lt;a class="heading-link" href="#union-find-%e7%9a%84%e5%ba%94%e7%94%a8"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;判断网络是否联通&lt;/li&gt;
&lt;li&gt;lc 200, number of islands&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="union-find-设计"&gt;
 Union find 设计
 &lt;a class="heading-link" href="#union-find-%e8%ae%be%e8%ae%a1"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;public&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;UF&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// init n sites with integer names (0~n-1)&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;UF(&lt;span style="color:#ff7b72"&gt;int&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;n);&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// connect p and q&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;void&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;union&lt;/span&gt;(&lt;span style="color:#ff7b72"&gt;int&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;p,&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;int&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;q);&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// find component id of p&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;int&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;find&lt;/span&gt;(&lt;span style="color:#ff7b72"&gt;int&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;p);&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// return if p and q is connected&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;boolean&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;connected&lt;/span&gt;(&lt;span style="color:#ff7b72"&gt;int&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;p,&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;int&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;q);&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// number of components&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;int&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;count&lt;/span&gt;();&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;&lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;union()&lt;/code&gt; 和 &lt;code&gt;connected()&lt;/code&gt; 都依赖于 &lt;code&gt;find()&lt;/code&gt;, 所以&lt;code&gt;find()&lt;/code&gt;要很有效率才行.&lt;/p&gt;</description></item><item><title>golang cheating sheet</title><link>https://joejztang.github.io/posts/golang-cheating-sheet/</link><pubDate>Fri, 02 Nov 2018 15:04:26 +0000</pubDate><guid>https://joejztang.github.io/posts/golang-cheating-sheet/</guid><description>&lt;h1 id="overview"&gt;
 overview
 &lt;a class="heading-link" href="#overview"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="go-is-a-compiled-lang"&gt;
 go is a compiled lang
 &lt;a class="heading-link" href="#go-is-a-compiled-lang"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;although go is a compiled language, it still has a lot of good features of interpreted language, like Garbage Collections.&lt;/p&gt;
&lt;h2 id="class-of-go---structs"&gt;
 class of go - &lt;code&gt;structs&lt;/code&gt;
 &lt;a class="heading-link" href="#class-of-go---structs"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;unlike &lt;code&gt;structs&lt;/code&gt; in C which is a combination of variables, structs in go is a combination of variables and methods.&lt;/p&gt;</description></item><item><title>recommender system</title><link>https://joejztang.github.io/posts/recommender-system/</link><pubDate>Sun, 28 Oct 2018 11:42:19 +0000</pubDate><guid>https://joejztang.github.io/posts/recommender-system/</guid><description>&lt;h1 id="algorithm"&gt;
 algorithm
 &lt;a class="heading-link" href="#algorithm"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;user collaborative filtering / user CF&lt;/li&gt;
&lt;li&gt;item collaborative filtering / item CF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们选取 item cf 来做.&lt;/p&gt;
&lt;h1 id="细节"&gt;
 细节
 &lt;a class="heading-link" href="#%e7%bb%86%e8%8a%82"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;build co-occurrence matrix&lt;/li&gt;
&lt;li&gt;build rating matrix&lt;/li&gt;
&lt;li&gt;matrix computation to get predicted result&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="item-cf-alg"&gt;
 item cf alg
 &lt;a class="heading-link" href="#item-cf-alg"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;什么时候用 item cf, 什么时候用 user cf.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当 user 数量远大于 item 数量的时候, 用 item cf. 当 item 数量远大于 user 数量或者 item 经常改变的时候, 要用 user cf.&lt;/p&gt;</description></item><item><title>react-redux 重要概念</title><link>https://joejztang.github.io/posts/react-redux-%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5/</link><pubDate>Fri, 07 Sep 2018 14:18:38 +0000</pubDate><guid>https://joejztang.github.io/posts/react-redux-%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5/</guid><description>&lt;h1 id="flux-和-redux"&gt;
 flux 和 redux
 &lt;a class="heading-link" href="#flux-%e5%92%8c-redux"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;说到 react-redux 就绕不开 flux 和 redux 模式. 他们有很多相同, 也有不同. 现在我们来回顾一下什么是 flux, 什么是 redux.&lt;/p&gt;
&lt;h2 id="flux"&gt;
 flux
 &lt;a class="heading-link" href="#flux"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://joejztang.github.io/images/flux.png" alt="flux"&gt;&lt;/p&gt;
&lt;p&gt;可以看到 flux 的精髓即数据永远单向流动.&lt;/p&gt;
&lt;h2 id="redux"&gt;
 Redux
 &lt;a class="heading-link" href="#redux"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;redux 借鉴了很多 flux 里的概念, 只是略有不同. redux 也是一种模式的设计.&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Flux&lt;/th&gt;
 &lt;th&gt;Redux&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;多个 store&lt;/td&gt;
 &lt;td&gt;一个 store&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dispatcher对 store 进行修改&lt;/td&gt;
 &lt;td&gt;没有 dispatcher这个概念. 它使用 reducer 进行事件的处理. reducer 是纯函数.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;看完了 flux 和 redux, 大概有个数, 就是大概这棵组件树就应该像下面这么画了.&lt;/p&gt;</description></item><item><title>redux 和 react-redux</title><link>https://joejztang.github.io/posts/redux-%E5%92%8C-react-redux/</link><pubDate>Wed, 05 Sep 2018 14:20:02 +0000</pubDate><guid>https://joejztang.github.io/posts/redux-%E5%92%8C-react-redux/</guid><description>&lt;h1 id="flux"&gt;
 Flux
 &lt;a class="heading-link" href="#flux"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;首先我们回顾一下 flux 的模式&lt;/p&gt;
&lt;p&gt;&lt;img src="https://joejztang.github.io/images/flux.png" alt="flux"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Flux的核心思想就是 &lt;strong&gt;数据和逻辑永远单向流动&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id="redux"&gt;
 redux
 &lt;a class="heading-link" href="#redux"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;redux 借鉴了很多 flux 里的概念, 只是略有不同. redux 也是一种模式的设计.&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Flux&lt;/th&gt;
 &lt;th&gt;Redux&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;多个 store&lt;/td&gt;
 &lt;td&gt;一个 store&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dispatcher对 store 进行修改&lt;/td&gt;
 &lt;td&gt;没有 dispatcher这个概念. 它使用 reducer 进行事件的处理. reducer 是纯函数.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="createstore"&gt;
 createStore
 &lt;a class="heading-link" href="#createstore"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;抽象出来一个 &lt;code&gt;createStore&lt;/code&gt;, 它可以产生 &lt;code&gt;store&lt;/code&gt;, 里面包含 &lt;code&gt;getState&lt;/code&gt; 和 &lt;code&gt;dispatch&lt;/code&gt;. 发现每次都要重复的渲染所有组件, 我们引入观察者模式, 加入 &lt;code&gt;subscriber&lt;/code&gt; 和 &lt;code&gt;listener&lt;/code&gt;, 把渲染这个 object(实际是函数) 压到 &lt;code&gt;listener&lt;/code&gt; 的array 里.&lt;/p&gt;</description></item><item><title>callback 函数的一点理解</title><link>https://joejztang.github.io/posts/callback-%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/</link><pubDate>Tue, 28 Aug 2018 15:29:16 +0000</pubDate><guid>https://joejztang.github.io/posts/callback-%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/</guid><description>&lt;h1 id="什么是-callback"&gt;
 什么是 callback
 &lt;a class="heading-link" href="#%e4%bb%80%e4%b9%88%e6%98%af-callback"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A callback function is a &lt;strong&gt;function&lt;/strong&gt; passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id="callback-函数执行过程的想象"&gt;
 callback 函数执行过程的想象
 &lt;a class="heading-link" href="#callback-%e5%87%bd%e6%95%b0%e6%89%a7%e8%a1%8c%e8%bf%87%e7%a8%8b%e7%9a%84%e6%83%b3%e8%b1%a1"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓的回调函数处理逻辑，其实就是先将回调函数的代码 冻结（或者理解为闲置），接着将这个回调函数的代码放到 &lt;strong&gt;回调函数管理器的队列&lt;/strong&gt; 里面。
待回调函数被触发调用的时候，对应的回调函数的代码才会从管理器队列 &lt;strong&gt;取出来并自动执行&lt;/strong&gt;（激活回调函数的代码），实现异步的编程效果。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id="一个小问题"&gt;
 一个小问题
 &lt;a class="heading-link" href="#%e4%b8%80%e4%b8%aa%e5%b0%8f%e9%97%ae%e9%a2%98"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;如同上面的引用说的, callback 被触发, 那么回调函数代码会被从队列里面 pull 出来, 自动执行/激活.&lt;/p&gt;</description></item><item><title>react 组件间通信与数据流</title><link>https://joejztang.github.io/posts/react-%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%B5%81/</link><pubDate>Tue, 28 Aug 2018 14:32:41 +0000</pubDate><guid>https://joejztang.github.io/posts/react-%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%B5%81/</guid><description>&lt;h1 id="数据流向"&gt;
 数据流向
 &lt;a class="heading-link" href="#%e6%95%b0%e6%8d%ae%e6%b5%81%e5%90%91"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;React是单向数据流，从父节点传递到子节点（通过&lt;code&gt;props&lt;/code&gt;）。如果顶层的某个&lt;code&gt;props&lt;/code&gt;改变了，React会重渲染所有的子节点（未做性能优化）。严格意义上React只提供，也强烈建议使用这种数据交流方式&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;数据既然只能从父传到子, 那么像以下的情景: 点击 button 改变状态是怎么实现的呢?&lt;/p&gt;
&lt;p&gt;答案是: &lt;strong&gt;callback function&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="组件沟通"&gt;
 组件沟通
 &lt;a class="heading-link" href="#%e7%bb%84%e4%bb%b6%e6%b2%9f%e9%80%9a"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;最常见的是先 &lt;strong&gt;父组件更新状态然后子组件更新状态&lt;/strong&gt;. 通过 &lt;code&gt;**props**&lt;/code&gt; 传递给子组件来实现&lt;/p&gt;
&lt;p&gt;还有一种情况就是 &lt;strong&gt;子组件更新状态然后父组件更新状态&lt;/strong&gt;. 这种情况通过父组件 &lt;strong&gt;传递 callback 给子组件&lt;/strong&gt;, 子组件触发即可.&lt;/p&gt;
&lt;p&gt;还有一种是兄弟组件沟通, 可以通过 props 传递(通过 callback 实现)给父组件, 然后改变兄弟的状态.&lt;/p&gt;
&lt;h1 id="全局事件"&gt;
 全局事件
 &lt;a class="heading-link" href="#%e5%85%a8%e5%b1%80%e4%ba%8b%e4%bb%b6"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;全局事件可以进行组件间的通讯, 官网推荐 Flux. Flux 是一种思想或者说模式, 就如同 MVC 和 MVVM 一样. 那么和 React 配对的就是 Redux. 我们一会再说.&lt;/p&gt;</description></item><item><title>鼠标 hover 控制元素是否显示</title><link>https://joejztang.github.io/posts/%E9%BC%A0%E6%A0%87-hover-%E6%8E%A7%E5%88%B6%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E6%98%BE%E7%A4%BA/</link><pubDate>Sun, 26 Aug 2018 23:18:29 +0000</pubDate><guid>https://joejztang.github.io/posts/%E9%BC%A0%E6%A0%87-hover-%E6%8E%A7%E5%88%B6%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E6%98%BE%E7%A4%BA/</guid><description>&lt;p&gt;怎么样实现当鼠标移动到一个地方, 一个隐藏的元素显示?&lt;/p&gt;
&lt;h1 id="pre-requests"&gt;
 pre-requests
 &lt;a class="heading-link" href="#pre-requests"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;A 元素和 B 元素有相同的父亲&lt;/li&gt;
&lt;li&gt;B 默认隐藏, A 默认显示&lt;/li&gt;
&lt;li&gt;当鼠标移动到 A 身上, A 的父亲获得 hover 的状态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;.father:hover .b&lt;/code&gt; 来实现.&lt;/p&gt;
&lt;h1 id="例子"&gt;
 例子
 &lt;a class="heading-link" href="#%e4%be%8b%e5%ad%90"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#7ee787"&gt;div&lt;/span&gt; class&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;#34;father&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#7ee787"&gt;div&lt;/span&gt; class&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;#34;brother-showing&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ....
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#7ee787"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#7ee787"&gt;div&lt;/span&gt; class&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;#34;element&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .....
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;/&lt;span style="color:#7ee787"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#7ee787"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#f0883e;font-weight:bold"&gt;element&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;display&lt;/span&gt;:&lt;span style="color:#79c0ff"&gt;none&lt;/span&gt;; &lt;span style="color:#f85149"&gt;//元素默认是隐藏的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;//&lt;/span&gt;&lt;span style="color:#7ee787"&gt;当鼠标经过兄弟元素brother-showing时&lt;/span&gt;&lt;span style="color:#f85149"&gt;，&lt;/span&gt;&lt;span style="color:#7ee787"&gt;也就是经过父级father的时候&lt;/span&gt;&lt;span style="color:#f85149"&gt;。&lt;/span&gt;&lt;span style="color:#7ee787"&gt;父级获得hover状态&lt;/span&gt;&lt;span style="color:#f85149"&gt;，&lt;/span&gt;&lt;span style="color:#7ee787"&gt;在父级hover的基础上写element的样式&lt;/span&gt;&lt;span style="color:#f85149"&gt;：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#f0883e;font-weight:bold"&gt;father&lt;/span&gt;:&lt;span style="color:#d2a8ff;font-weight:bold"&gt;hover&lt;/span&gt; .&lt;span style="color:#f0883e;font-weight:bold"&gt;element&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;display&lt;/span&gt;:&lt;span style="color:#79c0ff"&gt;block&lt;/span&gt; ;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="credit-to"&gt;
 credit to
 &lt;a class="heading-link" href="#credit-to"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://blog.csdn.net/phoooob/article/details/51565483" class="external-link" target="_blank" rel="noopener"&gt;鼠标悬浮控制元素隐藏与显示 - css中鼠标的hover状态&lt;/a&gt;&lt;/p&gt;</description></item><item><title>react 中 setState() 和 source of truth</title><link>https://joejztang.github.io/posts/react-%E4%B8%AD-setstate-%E5%92%8C-source-of-truth/</link><pubDate>Fri, 24 Aug 2018 16:54:53 +0000</pubDate><guid>https://joejztang.github.io/posts/react-%E4%B8%AD-setstate-%E5%92%8C-source-of-truth/</guid><description>&lt;h1 id="setstate"&gt;
 &lt;code&gt;setState()&lt;/code&gt;
 &lt;a class="heading-link" href="#setstate"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;setState()&lt;/code&gt; 接受对象作为参数. 只要调用 &lt;code&gt;setState()&lt;/code&gt;, 组件就会重新渲染. 但是当调用 &lt;code&gt;setState()&lt;/code&gt;的时候, &lt;strong&gt;reactjs 并不会马上修改 state&lt;/strong&gt;. reactjs 会把修改放到一个更新队列里面, 稍后才会从队列中把新的状态提取出来合并到 state 中, 然后再触发组件更新.&lt;/p&gt;
&lt;p&gt;还有就是 &lt;code&gt;setState()&lt;/code&gt; 只能在已经挂载或者正在挂载的组件上调用.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们一般会把组件的 &lt;code&gt;state&lt;/code&gt; 的初始化工作放在 &lt;code&gt;constructor&lt;/code&gt; 里面去做；在 &lt;code&gt;componentWillMount&lt;/code&gt; 进行组件的启动工作，例如 &lt;code&gt;Ajax&lt;/code&gt; 数据拉取、定时器的启动；组件从页面上销毁的时候，有时候需要一些数据的清理，例如定时器的清理，就会放在 &lt;code&gt;componentWillUnmount&lt;/code&gt; 里面去做。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id="为什么有-setstate"&gt;
 为什么有 &lt;code&gt;setState()&lt;/code&gt;?
 &lt;a class="heading-link" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e6%9c%89-setstate"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;html form 和 react 中的 dom 元素不太一样. html 中 form &lt;strong&gt;maintain their own state and update it based on user input&lt;/strong&gt;. 但是在 reactjs 中, &lt;strong&gt;state is typically kept in the state property of components&lt;/strong&gt;, 所以需要用 &lt;code&gt;setState()&lt;/code&gt; 来 update.&lt;/p&gt;</description></item><item><title>javascript 中的 bind 函数</title><link>https://joejztang.github.io/posts/javascript-%E4%B8%AD%E7%9A%84-bind-%E5%87%BD%E6%95%B0/</link><pubDate>Fri, 24 Aug 2018 10:56:22 +0000</pubDate><guid>https://joejztang.github.io/posts/javascript-%E4%B8%AD%E7%9A%84-bind-%E5%87%BD%E6%95%B0/</guid><description>&lt;h1 id="什么是-bind-函数"&gt;
 什么是 &lt;code&gt;bind&lt;/code&gt; 函数
 &lt;a class="heading-link" href="#%e4%bb%80%e4%b9%88%e6%98%af-bind-%e5%87%bd%e6%95%b0"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;bind()&lt;/code&gt; 方法会创建一个 &lt;strong&gt;新函数&lt;/strong&gt;. &lt;code&gt;bind&lt;/code&gt; 允许你设置这个值而不调用 &lt;strong&gt;新函数&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id="bind-函数的语法"&gt;
 &lt;code&gt;bind&lt;/code&gt; 函数的语法
 &lt;a class="heading-link" href="#bind-%e5%87%bd%e6%95%b0%e7%9a%84%e8%af%ad%e6%b3%95"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fun.bind(thisArg[, arg1[, arg2[, ...]]])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;thisArg 当 &lt;strong&gt;新函数&lt;/strong&gt; 被调用的时候, 该参数会作为原函数的 &lt;code&gt;this&lt;/code&gt; 指向. 但是, 当使用 &lt;code&gt;new&lt;/code&gt; 操作符调用新函数的时候, 该参数无效.&lt;/li&gt;
&lt;li&gt;arg1, arg2, &amp;hellip; 这些参数会依次作为原函数的运行参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="例子"&gt;
 例子
 &lt;a class="heading-link" href="#%e4%be%8b%e5%ad%90"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;this&lt;/span&gt;.name &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; &lt;span style="color:#a5d6ff"&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;var&lt;/span&gt; myName &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; name&lt;span style="color:#ff7b72;font-weight:bold"&gt;:&lt;/span&gt; &lt;span style="color:#a5d6ff"&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; getName&lt;span style="color:#ff7b72;font-weight:bold"&gt;:&lt;/span&gt; &lt;span style="color:#ff7b72"&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;return&lt;/span&gt; &lt;span style="color:#ff7b72"&gt;this&lt;/span&gt;.name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;var&lt;/span&gt; storeMyName &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; myName.getName; &lt;span style="color:#8b949e;font-style:italic"&gt;// example 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;var&lt;/span&gt; storeMyName2 &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; myName.getName.bind(myName); &lt;span style="color:#8b949e;font-style:italic"&gt;// example 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;var&lt;/span&gt; storeMyName3 &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; myName.getName(); &lt;span style="color:#8b949e;font-style:italic"&gt;// example 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;console.log(&lt;span style="color:#a5d6ff"&gt;&amp;#34;example 1: &amp;#34;&lt;/span&gt; &lt;span style="color:#ff7b72;font-weight:bold"&gt;+&lt;/span&gt; storeMyName()); &lt;span style="color:#8b949e;font-style:italic"&gt;// John
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;console.log(&lt;span style="color:#a5d6ff"&gt;&amp;#34;example 2: &amp;#34;&lt;/span&gt; &lt;span style="color:#ff7b72;font-weight:bold"&gt;+&lt;/span&gt; storeMyName2()); &lt;span style="color:#8b949e;font-style:italic"&gt;// Tom
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;console.log(&lt;span style="color:#a5d6ff"&gt;&amp;#34;example 3: &amp;#34;&lt;/span&gt; &lt;span style="color:#ff7b72;font-weight:bold"&gt;+&lt;/span&gt; storeMyName3); &lt;span style="color:#8b949e;font-style:italic"&gt;// Tom
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到对于 example1 来说, 没有 &lt;code&gt;bind(myName)&lt;/code&gt;, 那么在运行 getName 函数的时候, &lt;code&gt;this&lt;/code&gt; 指向了全局, 全局下 name 属性是 John.&lt;/p&gt;</description></item><item><title>nodejs require function</title><link>https://joejztang.github.io/posts/nodejs-require-function/</link><pubDate>Mon, 13 Aug 2018 23:53:39 +0000</pubDate><guid>https://joejztang.github.io/posts/nodejs-require-function/</guid><description>&lt;p&gt;最近自己在写 hexo 的插件, 然后发现 &lt;code&gt;require&lt;/code&gt; 函数里面写的东西有的时候不 make sense(至少在刚开始的时候). 所以我就搜索了一下这个 require 函数是怎么回事. 现在明白了一点点.&lt;/p&gt;
&lt;h1 id="require-核心模块"&gt;
 require 核心模块
 &lt;a class="heading-link" href="#require-%e6%a0%b8%e5%bf%83%e6%a8%a1%e5%9d%97"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;比如&lt;code&gt;var fs = require('fs');&lt;/code&gt;. 它就会去找 nodejs 的核心 fs 模块.&lt;/p&gt;
&lt;h1 id="require-文件模块"&gt;
 require 文件模块
 &lt;a class="heading-link" href="#require-%e6%96%87%e4%bb%b6%e6%a8%a1%e5%9d%97"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;文件模块的 js 里面必须有 &lt;code&gt;exports&lt;/code&gt; 或者 &lt;code&gt;module.exports&lt;/code&gt; 关键词来暴露这个模块.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;var&lt;/span&gt; foo&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;require(&lt;span style="color:#a5d6ff"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;); 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;//foo在默认目录下面没有，没有的话nodejs会在node_modules里面找这个模块
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过这个例子我们可以看到如果默认目录下没有, 那么会在 &lt;code&gt;node_modules&lt;/code&gt; 里面找, 所以现在可以理解 hexo 中 require 函数里面如果没有特别指定地址, 他就会去 &lt;code&gt;node_modules&lt;/code&gt; 里面找.&lt;/p&gt;
&lt;h1 id="credit-to"&gt;
 credit to
 &lt;a class="heading-link" href="#credit-to"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/houyanhua1/article/details/79438222" class="external-link" target="_blank" rel="noopener"&gt;nodejs 引入外部模块 require()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>intervals</title><link>https://joejztang.github.io/posts/intervals/</link><pubDate>Wed, 08 Aug 2018 19:06:04 +0000</pubDate><guid>https://joejztang.github.io/posts/intervals/</guid><description>&lt;h1 id="merge-intervals-lc-56"&gt;
 merge intervals LC 56
 &lt;a class="heading-link" href="#merge-intervals-lc-56"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="method-1"&gt;
 method 1
 &lt;a class="heading-link" href="#method-1"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sort by start&lt;/li&gt;
&lt;li&gt;sort by end (see from right to left)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="method-2"&gt;
 method 2
 &lt;a class="heading-link" href="#method-2"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;mergeSort (divide and conquer)&lt;/p&gt;
&lt;p&gt;谁小移谁&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt; [6,7) [2,5) [1,2) [0,3)
 \ / \ /
 [2,5) [6,7) [0,3)
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>闭包之阿隆佐邱奇的故事</title><link>https://joejztang.github.io/posts/%E9%97%AD%E5%8C%85%E4%B9%8B%E9%98%BF%E9%9A%86%E4%BD%90%E9%82%B1%E5%A5%87%E7%9A%84%E6%95%85%E4%BA%8B/</link><pubDate>Tue, 07 Aug 2018 11:30:56 +0000</pubDate><guid>https://joejztang.github.io/posts/%E9%97%AD%E5%8C%85%E4%B9%8B%E9%98%BF%E9%9A%86%E4%BD%90%E9%82%B1%E5%A5%87%E7%9A%84%E6%95%85%E4%BA%8B/</guid><description>&lt;h1 id="写在前面"&gt;
 写在前面
 &lt;a class="heading-link" href="#%e5%86%99%e5%9c%a8%e5%89%8d%e9%9d%a2"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;这是廖雪峰老师的博客出现的不计其数的例子, 原来看了没懂, 最近补上了一些基础知识, 试着再理解一下.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000#0" class="external-link" target="_blank" rel="noopener"&gt;廖老师的博客&lt;/a&gt;原文在这, 如果还不知道廖老师, 那么非常推荐你去看看.&lt;/p&gt;
&lt;h1 id="阿隆佐邱奇的脑洞"&gt;
 阿隆佐邱奇的脑洞
 &lt;a class="heading-link" href="#%e9%98%bf%e9%9a%86%e4%bd%90%e9%82%b1%e5%a5%87%e7%9a%84%e8%84%91%e6%b4%9e"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;很久很久以前，有个叫阿隆佐·邱奇的帅哥，发现只需要用函数，就可以用计算机实现运算，而不需要&lt;code&gt;0&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt;、&lt;code&gt;2&lt;/code&gt;、&lt;code&gt;3&lt;/code&gt;这些数字和&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;/&lt;/code&gt;这些符号。&lt;/p&gt;
&lt;p&gt;JavaScript支持函数，所以可以用JavaScript用函数来写这些计算。来试试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// 定义数字0:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;var&lt;/span&gt; zero &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; &lt;span style="color:#ff7b72"&gt;function&lt;/span&gt; (f) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;return&lt;/span&gt; &lt;span style="color:#ff7b72"&gt;function&lt;/span&gt; (x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;return&lt;/span&gt; x;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// 定义数字1:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;var&lt;/span&gt; one &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; &lt;span style="color:#ff7b72"&gt;function&lt;/span&gt; (f) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;return&lt;/span&gt; &lt;span style="color:#ff7b72"&gt;function&lt;/span&gt; (x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;return&lt;/span&gt; f(x);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// 定义加法:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;function&lt;/span&gt; add(n, m) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;return&lt;/span&gt; &lt;span style="color:#ff7b72"&gt;function&lt;/span&gt; (f) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;return&lt;/span&gt; &lt;span style="color:#ff7b72"&gt;function&lt;/span&gt; (x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;return&lt;/span&gt; m(f)(n(f)(x));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// 计算数字2 = 1 + 1:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;var&lt;/span&gt; two &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; add(one, one);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// 计算数字3 = 1 + 2:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;var&lt;/span&gt; three &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; add(one, two);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// 计算数字5 = 2 + 3:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;var&lt;/span&gt; five &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; add(two, three);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// 你说它是3就是3，你说它是5就是5，你怎么证明？
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// 呵呵，看这里:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// 给3传一个函数,会打印3次:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;(three(&lt;span style="color:#ff7b72"&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; console.log(&lt;span style="color:#a5d6ff"&gt;&amp;#39;print 3 times&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}))();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// 给5传一个函数,会打印5次:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;(five(&lt;span style="color:#ff7b72"&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; console.log(&lt;span style="color:#a5d6ff"&gt;&amp;#39;print 5 times&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}))();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// 继续接着玩一会...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;console 运行的结果还真是和预言的一样(让人头大)&lt;/p&gt;</description></item><item><title>javascript cheating sheet</title><link>https://joejztang.github.io/posts/javascript-cheating-sheet/</link><pubDate>Mon, 06 Aug 2018 22:44:51 +0000</pubDate><guid>https://joejztang.github.io/posts/javascript-cheating-sheet/</guid><description>&lt;h1 id="写在前头"&gt;
 写在前头
 &lt;a class="heading-link" href="#%e5%86%99%e5%9c%a8%e5%89%8d%e5%a4%b4"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;还是得要膜拜一下&lt;a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" class="external-link" target="_blank" rel="noopener"&gt;廖雪峰大神&lt;/a&gt;, 原文都在这了. 这篇帖子只是单纯的笔记整理&lt;/p&gt;
&lt;h1 id="数据类型"&gt;
 数据类型
 &lt;a class="heading-link" href="#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;number: 不区分整数和浮点数&lt;/li&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;li&gt;布尔值: &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="比较运算符--vs-"&gt;
 比较运算符, == vs. ===
 &lt;a class="heading-link" href="#%e6%af%94%e8%be%83%e8%bf%90%e7%ae%97%e7%ac%a6--vs-"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;javascript 允许对任意数据类型作比较&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#79c0ff"&gt;false&lt;/span&gt; &lt;span style="color:#ff7b72;font-weight:bold"&gt;==&lt;/span&gt; &lt;span style="color:#a5d6ff"&gt;0&lt;/span&gt; &lt;span style="color:#8b949e;font-style:italic"&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#79c0ff"&gt;false&lt;/span&gt; &lt;span style="color:#ff7b72;font-weight:bold"&gt;===&lt;/span&gt; &lt;span style="color:#a5d6ff"&gt;0&lt;/span&gt; &lt;span style="color:#8b949e;font-style:italic"&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt; 会自动转换数据类型再比较 (&lt;strong&gt;不推荐使用&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;===&lt;/code&gt; 不会转换数据类型 (&lt;strong&gt;应该坚持使用&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NaN&lt;/code&gt; 与所有值(包括自己都不同), 只有通过 &lt;code&gt;isNaN()&lt;/code&gt; 才能判断.&lt;/li&gt;
&lt;li&gt;比较浮点数时候, 要计算他们的绝对值是不是小于某个阈值&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="null-vs-undefined"&gt;
 null vs. undefined
 &lt;a class="heading-link" href="#null-vs-undefined"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt;, 空. 它不等于0, 也不等于&lt;code&gt;''&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; 表示值未定义, 只有在未规定 return 值的时候/object 中没有这个 prop 时候,会返回&lt;code&gt;undefined&lt;/code&gt;, 其他时候我都会用&lt;code&gt; null&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="javascript-中的对象"&gt;
 javascript 中的对象
 &lt;a class="heading-link" href="#javascript-%e4%b8%ad%e7%9a%84%e5%af%b9%e8%b1%a1"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;unsorted key-value pair&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>hexo 自动部署 本地自动执行 hexo g -d 的 python 脚本</title><link>https://joejztang.github.io/posts/hexo-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-%E6%9C%AC%E5%9C%B0%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C-hexo-g-d-%E7%9A%84-python-%E8%84%9A%E6%9C%AC/</link><pubDate>Thu, 02 Aug 2018 22:41:08 +0000</pubDate><guid>https://joejztang.github.io/posts/hexo-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-%E6%9C%AC%E5%9C%B0%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C-hexo-g-d-%E7%9A%84-python-%E8%84%9A%E6%9C%AC/</guid><description>&lt;p&gt;用 hexo 一段时间了, 主要就是写写刷题心得和自己学习过程, 算是自己给自己写的 reference.&lt;/p&gt;
&lt;p&gt;不幸的是前一段时间写了好多 draft, 然后其中一篇有 syntax error, 导致 &lt;code&gt;hexo g&lt;/code&gt; 就是过不了. 在几十篇帖子里二分查找真是&amp;rsquo;爽&amp;rsquo;啊! 于是我就想到了很早之前就已经关注到的 hexo 自动部署 solution.&lt;/p&gt;
&lt;p&gt;网上很容易找到的 solution 的思路都是把自己 source 里面的一些文件包括文章啊, 可能还有 theme 什么的放到 github 另一个 branch, 然后通过 webhook 监听, 如果有变动就执行 &lt;code&gt;hexo g -d&lt;/code&gt;, 大概就是这样子. 由于我不太想把自己的源代码都放到另一个 branch 上(万一想加个密啥的呢), 所以这个 solution 显然不是我能用的 solution.&lt;/p&gt;
&lt;p&gt;于是我在网上找, 发现linux 有个叫 &lt;code&gt;crontab&lt;/code&gt; 的定时执行程序, 于是我的思路来了, 为什么不定时执行 python script 来执行 &lt;code&gt;hexo g -d&lt;/code&gt; 这条命令呢? (后来在网上查到早有人已经写了, 但是没给放代码, 帖子后面会放上我写的 script)&lt;/p&gt;
&lt;p&gt;这篇帖子我就来说说我写这个 script 的时候遇见的坑.&lt;/p&gt;
&lt;h1 id="思路"&gt;
 思路
 &lt;a class="heading-link" href="#%e6%80%9d%e8%b7%af"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;通过 &lt;code&gt;crontab&lt;/code&gt; 定时执行 python script, 达到自动执行 &lt;code&gt;hexo g -d&lt;/code&gt; 的目的.&lt;/p&gt;</description></item><item><title>scrapy recipe</title><link>https://joejztang.github.io/posts/scrapy/</link><pubDate>Tue, 03 Jul 2018 16:39:39 +0000</pubDate><guid>https://joejztang.github.io/posts/scrapy/</guid><description>&lt;h1 id="basic-command"&gt;
 basic command
 &lt;a class="heading-link" href="#basic-command"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="create-a-project"&gt;
 create a project
 &lt;a class="heading-link" href="#create-a-project"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scrapy startproject &amp;lt;project_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd &amp;lt;project_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scrapy genspider &amp;lt;spider_name&amp;gt; &amp;lt;url&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;for &lt;code&gt;url&lt;/code&gt;, remove &lt;code&gt;www.&lt;/code&gt; or it will creates error.&lt;/p&gt;
&lt;h2 id="list-all-spiders"&gt;
 list all spiders
 &lt;a class="heading-link" href="#list-all-spiders"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scrapy list&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="start-shell"&gt;
 start shell
 &lt;a class="heading-link" href="#start-shell"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scrapy shell&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="scrapy-argument"&gt;
 scrapy argument
 &lt;a class="heading-link" href="#scrapy-argument"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scrapy crawl &amp;lt;spider name&amp;gt; -a &amp;lt;argument name: &amp;quot;argument content&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;</description></item><item><title>database normalization</title><link>https://joejztang.github.io/posts/database-normalization/</link><pubDate>Tue, 29 May 2018 11:45:17 +0000</pubDate><guid>https://joejztang.github.io/posts/database-normalization/</guid><description>&lt;p&gt;最近看见了 database normalization. 之前老师上课没好好讲, 现在看见了就自己再总结一下.&lt;/p&gt;
&lt;p&gt;Edgar F. Codd 有三个 definations, 甚至更多???&lt;/p&gt;
&lt;h1 id="znf---zero-normalized-from"&gt;
 ZNF - zero normalized from
 &lt;a class="heading-link" href="#znf---zero-normalized-from"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;A non-normalized table structure is considered to be zero normal form (ZNF)&lt;/p&gt;
&lt;h1 id="1nf---first-normalized-form"&gt;
 1NF - first normalized form
 &lt;a class="heading-link" href="#1nf---first-normalized-form"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Atomicity&lt;/em&gt;: cannot be decomposed into smaller pieces by the DBMS (excluding certain special functions)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;no repeating groups&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Identify each set of related data with &lt;strong&gt;a primary key&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create a separate table for each set of related data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;compound/multiple primary keys doesn&amp;rsquo;t voilate 1NF&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>String interning in java and python</title><link>https://joejztang.github.io/posts/string-interning-in-java-and-python/</link><pubDate>Tue, 22 May 2018 11:28:49 +0000</pubDate><guid>https://joejztang.github.io/posts/string-interning-in-java-and-python/</guid><description>&lt;h1 id="什么是-string-interning"&gt;
 什么是 string interning
 &lt;a class="heading-link" href="#%e4%bb%80%e4%b9%88%e6%98%af-string-interning"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;In computer science, string interning is a method of storing only one copy of each distinct string value, which must be immutable. Interning strings makes some string processing tasks more time- or space-efficient at the cost of requiring more time when the string is created or interned. The distinct values are stored in a string intern pool.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;mdash; from Wikipedia&lt;/p&gt;</description></item><item><title>photoshop essential</title><link>https://joejztang.github.io/posts/photoshop-essential/</link><pubDate>Fri, 04 May 2018 13:45:35 +0000</pubDate><guid>https://joejztang.github.io/posts/photoshop-essential/</guid><description>&lt;h1 id="crop-tools"&gt;
 crop tools
 &lt;a class="heading-link" href="#crop-tools"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;You can retain the information from the cropped area, if you choose to, for use again in later edits.&lt;/li&gt;
&lt;li&gt;Specialist options within the cropping tool will allow you straighten images - and either crop out all transparent areas to allow you auto fill theses areas(content aware).&lt;/li&gt;
&lt;li&gt;Autofill content aware will fill the transparent areas, created by cropping, by sampling the surrounding area and creating information that is similar.&lt;/li&gt;
&lt;li&gt;You must always check the autofill and make any necessary corrections.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="self-healing-brush"&gt;
 self-healing brush
 &lt;a class="heading-link" href="#self-healing-brush"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Like using the autofill, the self-healing brush will sample the area around it and paint the area to match as best it can.&lt;/li&gt;
&lt;li&gt;Always do the corrections on a new blank layer above the layer being corrected.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In the Spot Healing tool select sample all layers&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="layers"&gt;
 layers
 &lt;a class="heading-link" href="#layers"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Photoshop layers are like sheets of stacked acetate. You can see through transparent areas of a layer to the layers below. You move the content on the layer where you want it to appear, like sliding a sheet of acetate in a stack. You can also change the opacity of a layer to make content partially transparent.&lt;/p&gt;</description></item><item><title>intermediate photography</title><link>https://joejztang.github.io/posts/intermediate-photography/</link><pubDate>Thu, 03 May 2018 19:08:08 +0000</pubDate><guid>https://joejztang.github.io/posts/intermediate-photography/</guid><description>&lt;h1 id="shutter-speed-1focallength-rule"&gt;
 shutter speed &lt;code&gt;1/focallength&lt;/code&gt; rule
 &lt;a class="heading-link" href="#shutter-speed-1focallength-rule"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;how to choose shutter speed to shoot an acceptable sharp photo?&lt;/p&gt;
&lt;p&gt;follow focal length rule.&lt;/p&gt;
&lt;p&gt;say you have a 50 mm lens, &lt;strong&gt;shutter speed should less or equals to 1/50&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;x-sync speed&lt;/strong&gt;(1/250 - 1/500): the fast time fisrt curtain open completely and expose the whole sensor&lt;/p&gt;
&lt;p&gt;set shutter speed to x-sync, no quicker(eg. 1/1000 there will be bans). when you have a flask unit.&lt;/p&gt;</description></item><item><title>quickly calculate determinant of matrix</title><link>https://joejztang.github.io/posts/quickly-calculate-determinant-of-matrix/</link><pubDate>Mon, 16 Apr 2018 15:15:29 +0000</pubDate><guid>https://joejztang.github.io/posts/quickly-calculate-determinant-of-matrix/</guid><description>&lt;h1 id="2x2-matrix"&gt;
 2x2 Matrix
 &lt;a class="heading-link" href="#2x2-matrix"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s review how to calculate determinant of a 2x2 matrix. For example, given below matrix:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://joejztang.github.io/images/2x2matrix.png" alt="2x2"&gt;&lt;/p&gt;
&lt;p&gt;\[ det(A) = a11a12-a12a21 \]&lt;/p&gt;
&lt;p&gt;from the image, we can conclude that it equals to GREEN arrow minus RED arrow.&lt;/p&gt;
&lt;h1 id="3x3-matrix"&gt;
 3x3 Matrix
 &lt;a class="heading-link" href="#3x3-matrix"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s move to 3x3 matrix, given below matrix:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://joejztang.github.io/images/3x3matrix.png" alt="3x3"&gt;&lt;/p&gt;
&lt;p&gt;\[ det(A) = a11a22a33 + a12a23a31 + a13a21a32 - a12a21a33 - a11a23a32 - a13a22a31 \]&lt;/p&gt;</description></item><item><title>hexo seo</title><link>https://joejztang.github.io/posts/hexo-seo/</link><pubDate>Fri, 13 Apr 2018 23:20:52 +0000</pubDate><guid>https://joejztang.github.io/posts/hexo-seo/</guid><description>&lt;p&gt;以前一直都不明白 seo 是个什么东西.&lt;/p&gt;
&lt;p&gt;但是最近重新用 hexo 记录一些学习过程. 写完手贱在 google 上搜了一下, 什么都搜不到, 于是 seo 这个词就蹦到了我的脑子里. 原来 seo 是干这个的.&lt;/p&gt;
&lt;h2 id="sitemap"&gt;
 sitemap
 &lt;a class="heading-link" href="#sitemap"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Sitemap即网站地图，它的作用在于便于搜索引擎更加智能地抓取网站。最简单和常见的sitemap形式，是XML文件，在其中列出网站中的网址以及关于每个网址的其他元数据&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="使用的hexo-plugin"&gt;
 使用的hexo plugin
 &lt;a class="heading-link" href="#%e4%bd%bf%e7%94%a8%e7%9a%84hexo-plugin"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;npm install hexo-generator-sitemap --save
npm install hexo-generator-baidu-sitemap --save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;root下&lt;code&gt;_config.yml&lt;/code&gt; 添加&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;#hexo sitemap
sitemap:
 path: sitemap.xml
baidusitemap:
 path: baidusitemap.xml
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="添加-robotstxt"&gt;
 添加 &lt;code&gt;robots.txt&lt;/code&gt;
 &lt;a class="heading-link" href="#%e6%b7%bb%e5%8a%a0-robotstxt"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;robots.txt&lt;/code&gt;（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。
在 &lt;code&gt;source&lt;/code&gt; 目录下增加 &lt;code&gt;robots.txt&lt;/code&gt; 文件，网站生成后在网站的根目录(&lt;code&gt;站点目录/public/&lt;/code&gt;)下。&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;User-agent: *
Allow: /
Allow: /archives/
Allow: /categories/
Allow: /tags/

Disallow: /vendors/
Disallow: /js/
Disallow: /css/
Disallow: /fonts/
Disallow: /vendors/
Disallow: /fancybox/

Sitemap: https://&amp;lt;your_domain&amp;gt;/sitemap.xml
Sitemap: https://&amp;lt;your_domain&amp;gt;/baidusitemap.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Allow表示允许被访问的，Disallow是不允许的意思。注意后面两个Sitemap就是网站地图了。而网站地图前面说了是给爬虫用的。这里配置在robots中。&lt;/em&gt;&lt;/p&gt;</description></item><item><title>git merge</title><link>https://joejztang.github.io/posts/git-merge/</link><pubDate>Thu, 05 Apr 2018 12:10:50 +0000</pubDate><guid>https://joejztang.github.io/posts/git-merge/</guid><description>&lt;p&gt;command &lt;code&gt;git merge&lt;/code&gt; is usually used in conjunction with &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git branch -d&lt;/code&gt;(for deleting obsolete branches).&lt;/p&gt;
&lt;p&gt;credits to &lt;a href="https://www.atlassian.com/git/tutorials/using-branches/git-merge" class="external-link" target="_blank" rel="noopener"&gt;Atlassian Bitbucket Tutorials&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="prepare-to-merge"&gt;
 prepare to merge
 &lt;a class="heading-link" href="#prepare-to-merge"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id="confirm-the-receiving-branch"&gt;
 confirm the receiving branch
 &lt;a class="heading-link" href="#confirm-the-receiving-branch"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;use &lt;code&gt;git checkout &amp;lt;receiving_branch&amp;gt;&lt;/code&gt; to switch to receiving branch. In some case, I want to merge to master so that I execute &lt;code&gt;git checkout master&lt;/code&gt;&lt;/p&gt;</description></item><item><title>git common commands</title><link>https://joejztang.github.io/posts/git-common-commands/</link><pubDate>Wed, 04 Apr 2018 14:20:18 +0000</pubDate><guid>https://joejztang.github.io/posts/git-common-commands/</guid><description>&lt;p&gt;some comman git commands&lt;/p&gt;</description></item><item><title>git checkout reset revert branch</title><link>https://joejztang.github.io/posts/git-checkout-reset-revert-branch/</link><pubDate>Wed, 04 Apr 2018 12:14:54 +0000</pubDate><guid>https://joejztang.github.io/posts/git-checkout-reset-revert-branch/</guid><description>&lt;p&gt;Besides some very useful git commands, such as &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git status&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, etc., there are three additional commands that gives more flexibility to your work&amp;mdash; they are &lt;code&gt;git reset&lt;/code&gt;, &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git revert&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;credit to &lt;a href="https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting" class="external-link" target="_blank" rel="noopener"&gt;Atlassian Bitbucket tutorials&lt;/a&gt;&lt;/p&gt;</description></item><item><title>python circular imports</title><link>https://joejztang.github.io/posts/python-circular-imports/</link><pubDate>Thu, 29 Mar 2018 11:47:27 +0000</pubDate><guid>https://joejztang.github.io/posts/python-circular-imports/</guid><description>&lt;h3 id="many-ways-to-import-a-module"&gt;
 many ways to import a module
 &lt;a class="heading-link" href="#many-ways-to-import-a-module"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id="import-x"&gt;
 &lt;code&gt;import X&lt;/code&gt;
 &lt;a class="heading-link" href="#import-x"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;imports module X, and creates a reference to module in current namespace.&lt;/p&gt;
&lt;h4 id="from-x-import-a-b-c"&gt;
 &lt;code&gt;from X import a, b, c&lt;/code&gt;
 &lt;a class="heading-link" href="#from-x-import-a-b-c"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;imports module X and creates references in the current namespace to given objects, in this case a, b, c.&lt;/p&gt;
&lt;h3 id="what-does-python-do-to-import-module"&gt;
 what does python do to import module
 &lt;a class="heading-link" href="#what-does-python-do-to-import-module"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;if module has already registered (sys.modules), it just passes.&lt;/p&gt;</description></item><item><title>python from import vs import</title><link>https://joejztang.github.io/posts/python-from-import-vs-import/</link><pubDate>Thu, 29 Mar 2018 10:52:14 +0000</pubDate><guid>https://joejztang.github.io/posts/python-from-import-vs-import/</guid><description>&lt;p&gt;python has two basic import syntax, they are&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;import module

from module import x
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;what is the difference and when do I use them?&lt;/p&gt;
&lt;h4 id="from-module-import-x"&gt;
 from module import x
 &lt;a class="heading-link" href="#from-module-import-x"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;the attributes and methods of the imported module types are imported directly into the local namespace, so they are available directly, without qualification by module name.&lt;/p&gt;
&lt;p&gt;for example:&lt;/p&gt;
&lt;p&gt;when I use &lt;code&gt;import types&lt;/code&gt;, I want to call function &lt;code&gt;FunctionType&lt;/code&gt; in &lt;code&gt;types&lt;/code&gt; module, I have to do this&lt;/p&gt;</description></item><item><title>java stream introduction</title><link>https://joejztang.github.io/posts/java-stream-introduction/</link><pubDate>Sat, 24 Mar 2018 15:50:09 +0000</pubDate><guid>https://joejztang.github.io/posts/java-stream-introduction/</guid><description>&lt;p&gt;Background: multi-core processors are available at ease, a Java developer has to write parallel code processing that can be pretty error-prone.&lt;/p&gt;
&lt;p&gt;Solutions:
Java 8 introduced the concept of stream that lets the developer to process data declaratively and leverage multicore architecture without the need to write any specific code for it.&lt;/p&gt;</description></item><item><title>java8 lambda introduction</title><link>https://joejztang.github.io/posts/java8-lambda-introduction/</link><pubDate>Sat, 24 Mar 2018 14:56:58 +0000</pubDate><guid>https://joejztang.github.io/posts/java8-lambda-introduction/</guid><description>&lt;p&gt;This article gives credit to &lt;a href="https://medium.freecodecamp.org/learn-these-4-things-and-working-with-lambda-expressions-b0ab36e0fffc" class="external-link" target="_blank" rel="noopener"&gt;Luis Santiago&lt;/a&gt;&lt;/p&gt;</description></item><item><title>working with math equations in hexo next theme</title><link>https://joejztang.github.io/posts/working-with-math-equations-in-hexo-next-theme/</link><pubDate>Thu, 22 Mar 2018 12:03:41 +0000</pubDate><guid>https://joejztang.github.io/posts/working-with-math-equations-in-hexo-next-theme/</guid><description>&lt;p&gt;If you are using hexo with the help of Next theme and you want to show some professional equations, please see this post. It will tell you how to render math equations.&lt;/p&gt;
&lt;p&gt;Since hexo cannot recover the exactly environment if you change you computer or what so ever, so it is not necessary to show the env parameters.&lt;/p&gt;
&lt;p&gt;The followings are steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go to &lt;code&gt;themes/next/_config.yml&lt;/code&gt;, look for &lt;code&gt;math&lt;/code&gt; and you will find:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;math:
 enable: false
 ...
 engine: mathjax
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;change it to&lt;/p&gt;</description></item><item><title>linear algebra cheating sheet</title><link>https://joejztang.github.io/posts/linear-algebra-cheating-sheet/</link><pubDate>Thu, 22 Mar 2018 11:07:57 +0000</pubDate><guid>https://joejztang.github.io/posts/linear-algebra-cheating-sheet/</guid><description>&lt;p&gt;This cheating sheet is only computer/Machine Learning/Deep Learning wise.&lt;/p&gt;
&lt;p&gt;I have read &lt;a href="http://tutorial.math.lamar.edu" class="external-link" target="_blank" rel="noopener"&gt;Paul Dawkin&lt;/a&gt;&amp;rsquo;s previous contents and accumulated some gists that I found useful. (content seems not to be there anymore, for more infomation, please contact the author)&lt;/p&gt;</description></item><item><title>hexo categories/tags 404 issue on github</title><link>https://joejztang.github.io/posts/hexo-categories-tags-404-issue-on-github/</link><pubDate>Wed, 21 Mar 2018 13:35:54 +0000</pubDate><guid>https://joejztang.github.io/posts/hexo-categories-tags-404-issue-on-github/</guid><description>&lt;p&gt;Sometimes, when you run server locally aka &lt;code&gt;hexo s&lt;/code&gt;, you will find your categories page and tags page (mainly these two pages) are working fine. But when you deploy pages using &lt;code&gt;hexo d&lt;/code&gt;, the pages suddenly give you 404.&lt;/p&gt;
&lt;h2 id="why-is-that"&gt;
 Why is that?
 &lt;a class="heading-link" href="#why-is-that"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;git is case in-sensitive defaultly, but javascript is a case sensitive language. That is telling you node.js will not find your route if case in-sensitive.&lt;/p&gt;</description></item><item><title>super() in python</title><link>https://joejztang.github.io/posts/super-in-python/</link><pubDate>Sun, 12 Nov 2017 18:03:33 +0000</pubDate><guid>https://joejztang.github.io/posts/super-in-python/</guid><description>&lt;p&gt;In python, super() is a simple way to solve inheritance issues. It has two major use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;allow to avoid using base class explicitly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;working with multiple inheritance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;examples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-py" data-lang="py"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;Mammal&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self, mammalName):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(mammalName, &lt;span style="color:#a5d6ff"&gt;&amp;#39;is a warm-blooded animal.&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;Dog&lt;/span&gt;(Mammal):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#a5d6ff"&gt;&amp;#39;Dog has four legs.&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super()&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(&lt;span style="color:#a5d6ff"&gt;&amp;#39;Dog&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;d1 &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; Dog()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;output:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Dog has four legs.
Dog is a warm-blooded animal.
&lt;/code&gt;&lt;/pre&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-py" data-lang="py"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;Animal&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self, animalName):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(animalName, &lt;span style="color:#a5d6ff"&gt;&amp;#39;is an animal.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;Mammal&lt;/span&gt;(Animal):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self, mammalName):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(mammalName, &lt;span style="color:#a5d6ff"&gt;&amp;#39;is a warm-blooded animal.&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super()&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(mammalName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;NonWingedMammal&lt;/span&gt;(Mammal):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self, NonWingedMammalName):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(NonWingedMammalName, &lt;span style="color:#a5d6ff"&gt;&amp;#34;can&amp;#39;t fly.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super()&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(NonWingedMammalName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;NonMarineMammal&lt;/span&gt;(Mammal):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self, NonMarineMammalName):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(NonMarineMammalName, &lt;span style="color:#a5d6ff"&gt;&amp;#34;can&amp;#39;t swim.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super()&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(NonMarineMammalName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;Dog&lt;/span&gt;(NonMarineMammal, NonWingedMammal):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#a5d6ff"&gt;&amp;#39;Dog has 4 legs.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super()&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(&lt;span style="color:#a5d6ff"&gt;&amp;#39;Dog&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;d &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; Dog()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#a5d6ff"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bat &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; NonMarineMammal(&lt;span style="color:#a5d6ff"&gt;&amp;#39;Bat&amp;#39;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;output:&lt;/p&gt;</description></item><item><title>Django application simple tutorial</title><link>https://joejztang.github.io/posts/django-application-simple-tutorial/</link><pubDate>Mon, 06 Nov 2017 20:50:52 +0000</pubDate><guid>https://joejztang.github.io/posts/django-application-simple-tutorial/</guid><description>&lt;p&gt;This is sort of a cheating sheet for a simple django application. You can get ideas on how to create a fully functional django application.&lt;/p&gt;</description></item><item><title>django sqlite migrate and admin</title><link>https://joejztang.github.io/posts/django-sqlite-migrate-and-admin/</link><pubDate>Sun, 05 Nov 2017 12:49:06 +0000</pubDate><guid>https://joejztang.github.io/posts/django-sqlite-migrate-and-admin/</guid><description>&lt;h1 id="django-sqlite-creation-and-admin"&gt;
 Django SQLite creation and Admin
 &lt;a class="heading-link" href="#django-sqlite-creation-and-admin"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Django provides very powerful admin panel for administrator to control the web application.&lt;/p&gt;
&lt;p&gt;In order to use python admin panel, one has to create several models. Under a certain apps package in &lt;code&gt;models.py&lt;/code&gt;, one can create SQL Models. And under the same directory in &lt;code&gt;admin.py&lt;/code&gt;, one can register the model by using &lt;code&gt;admin.site.register()&lt;/code&gt; to register.&lt;/p&gt;
&lt;h1 id="migration"&gt;
 Migration
 &lt;a class="heading-link" href="#migration"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;python manage.py migrate&lt;/code&gt;&lt;/p&gt;</description></item><item><title>static photo</title><link>https://joejztang.github.io/posts/static-photo/</link><pubDate>Tue, 31 Oct 2017 23:15:52 +0000</pubDate><guid>https://joejztang.github.io/posts/static-photo/</guid><description>&lt;h1 id="how-to-add-static-photo"&gt;
 How to add static photo
 &lt;a class="heading-link" href="#how-to-add-static-photo"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;</description></item><item><title>templates excise</title><link>https://joejztang.github.io/posts/templates-excise/</link><pubDate>Tue, 31 Oct 2017 20:10:03 +0000</pubDate><guid>https://joejztang.github.io/posts/templates-excise/</guid><description>&lt;h1 id="excisesusing-template-to-show-help-page"&gt;
 Excises&amp;mdash;using template to show help page
 &lt;a class="heading-link" href="#excisesusing-template-to-show-help-page"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;create new app&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;django-admin startproject ProTwo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python manage.py startapp AppTwo&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create new &lt;code&gt;templates&lt;/code&gt; folder in project folder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in this way, django knows where to find these templates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create new html template&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;under &lt;code&gt;templates&lt;/code&gt; folder, we create a new html file(create new folder for app and create new html file into that folder)&lt;/p&gt;
&lt;p&gt;in the new html file, we can use template tags(a.k.a Django Template Variable) that pass content into this template to show.&lt;/p&gt;</description></item><item><title>regular expression python3</title><link>https://joejztang.github.io/posts/regular-expression-python3/</link><pubDate>Mon, 30 Oct 2017 17:49:22 +0000</pubDate><guid>https://joejztang.github.io/posts/regular-expression-python3/</guid><description>&lt;h1 id="regular-expression-in-python3"&gt;
 Regular expression in Python3
 &lt;a class="heading-link" href="#regular-expression-in-python3"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;credit from 廖雪峰的官网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见表达&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;\d&lt;/code&gt; &amp;mdash; 用来匹配数字(digit)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\w&lt;/code&gt; &amp;mdash; 用来匹配字母或数字(Word)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\s&lt;/code&gt; &amp;mdash; 用来匹配空格(space)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt; &amp;mdash; 用来匹配任意字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; &amp;mdash; 匹配&amp;gt;=0个字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt; &amp;mdash; 匹配&amp;gt;0个字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt; &amp;mdash; 匹配0或1个字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{n, m}&lt;/code&gt; &amp;mdash; 表示 n-m 个字符, 通常和&lt;code&gt;\d&lt;/code&gt;,&lt;code&gt;\w&lt;/code&gt;,&lt;code&gt;\s&lt;/code&gt;搭配着用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[]&lt;/code&gt; &amp;mdash; 表示范围. eg: &lt;code&gt;[a-zA-Z\_][0-9a-zA-Z\_]*&lt;/code&gt;可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A|B&lt;/code&gt; &amp;mdash; 可以匹配A或B&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt; &amp;mdash; 表示行的开头&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt; &amp;mdash; 表示行的结束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;re 模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;r&lt;/code&gt; 前缀, 不考虑转译的问题. eg:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-py" data-lang="py"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; &lt;span style="color:#79c0ff"&gt;r&lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;#39;ABC\-001&amp;#39;&lt;/span&gt; &lt;span style="color:#8b949e;font-style:italic"&gt;# Python的字符串&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;# 对应的正则表达式字符串不变：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;# &amp;#39;ABC\-001&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;match()&lt;/code&gt; 来判断是否匹配成功, 成功则返回一个 Match 对象, 否则, 返回 &lt;code&gt;None&lt;/code&gt;&lt;/p&gt;</description></item><item><title>python3 cheathing sheet</title><link>https://joejztang.github.io/posts/python3-cheathing-sheet/</link><pubDate>Thu, 05 Oct 2017 22:35:25 +0000</pubDate><guid>https://joejztang.github.io/posts/python3-cheathing-sheet/</guid><description>&lt;p&gt;python3 is not compatible with lower version of python e.g. python2.x. Listed are some python basics and differences between python2 and python3.&lt;/p&gt;</description></item><item><title>hexo cheating sheet</title><link>https://joejztang.github.io/posts/hexo-cheating-sheet/</link><pubDate>Thu, 28 Sep 2017 19:53:00 +0000</pubDate><guid>https://joejztang.github.io/posts/hexo-cheating-sheet/</guid><description>&lt;h1 id="hexo-system-command"&gt;
 hexo system command
 &lt;a class="heading-link" href="#hexo-system-command"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;npm install hexo -g #Install hexo 
npm update hexo -g #Upgrade hexo 
hexo init #Initialize
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id="hexo-post-related"&gt;
 hexo post related
 &lt;a class="heading-link" href="#hexo-post-related"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;hexo n &amp;#34;my post&amp;#34; == hexo new &amp;#34;my post&amp;#34; #create a new post
hexo p &amp;#34;my post&amp;#34; == hexo publish &amp;#34;my post&amp;#34; #publish
hexo g == hexo generate
hexo s == hexo server #start server to preview
hexo d == hexo deploy
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>Https local environment</title><link>https://joejztang.github.io/posts/https-local-environment/</link><pubDate>Sun, 30 Apr 2017 17:28:32 +0000</pubDate><guid>https://joejztang.github.io/posts/https-local-environment/</guid><description>&lt;p&gt;最近做一个项目, 需要用到 ssl 环境, 于是需要折腾一个本地环境.&lt;/p&gt;
&lt;p&gt;我采用的是 mamp pro, 步骤如下.&lt;/p&gt;</description></item><item><title>php composer stuff</title><link>https://joejztang.github.io/posts/php-composer/</link><pubDate>Thu, 20 Apr 2017 21:53:35 +0000</pubDate><guid>https://joejztang.github.io/posts/php-composer/</guid><description>&lt;p&gt;开宗明义, 这是个介绍帖. 如果懒得看这个介绍, 请移步&lt;/p&gt;
&lt;p&gt;&lt;a href="https://getcomposer.org/" class="external-link" target="_blank" rel="noopener"&gt;https://getcomposer.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天写 php, 需要一个 lib, 本来打算就 &lt;code&gt;require_once&lt;/code&gt; 一下就得了, 结果发现 github repo 有一堆东西, 发现好像跟我想象的不是特别一样. 而且安装指南写了推荐 composer, 并且给出了有 composer 的时候的使用方法, 但是并没有给出非 composer 的使用方法&amp;hellip;&amp;hellip;这不是逼人用这个 composer 么&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;转到正体,&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Composer is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这么一看, 有点像 npm 啊. 暂且咱就先理解他为 npm.&lt;/p&gt;
&lt;p&gt;然后安装上也很贴心的分为 locally 和 globally 两种. 暂时只试了 locally 的方法.(其实也是个误打误撞)&lt;/p&gt;
&lt;h3 id="locally-安装"&gt;
 locally 安装
 &lt;a class="heading-link" href="#locally-%e5%ae%89%e8%a3%85"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Run this in your terminal to get the latest Composer version:&lt;/p&gt;</description></item><item><title>php debug 500</title><link>https://joejztang.github.io/posts/php-debug-500/</link><pubDate>Wed, 19 Apr 2017 17:33:32 +0000</pubDate><guid>https://joejztang.github.io/posts/php-debug-500/</guid><description>&lt;p&gt;next time when encounter 500 error using php scripts, try following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;error_reporting(&lt;span style="color:#ff7b72;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;1&lt;/span&gt;); &lt;span style="color:#8b949e;font-style:italic"&gt;// reports all errors
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;ini_set(&lt;span style="color:#a5d6ff"&gt;&amp;#34;display_errors&amp;#34;&lt;/span&gt;, &lt;span style="color:#a5d6ff"&gt;&amp;#34;1&amp;#34;&lt;/span&gt;); &lt;span style="color:#8b949e;font-style:italic"&gt;// shows all errors
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;&lt;/span&gt;ini_set(&lt;span style="color:#a5d6ff"&gt;&amp;#34;log_errors&amp;#34;&lt;/span&gt;, &lt;span style="color:#a5d6ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ini_set(&lt;span style="color:#a5d6ff"&gt;&amp;#34;error_log&amp;#34;&lt;/span&gt;, &lt;span style="color:#a5d6ff"&gt;&amp;#34;/tmp/php-error.log&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>PHP include, include_once, require, require_once</title><link>https://joejztang.github.io/posts/php-include-include-once-require-require-once/</link><pubDate>Wed, 19 Apr 2017 16:33:59 +0000</pubDate><guid>https://joejztang.github.io/posts/php-include-include-once-require-require-once/</guid><description>&lt;p&gt;there are four ways to import library to php, they are &lt;code&gt;include&lt;/code&gt;, &lt;code&gt;include_once&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;require_once&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;what is the difference?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;require&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when the file is required by your application, e.g. an important message template or a file containing configuration variables without which the app would break.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;require_once&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when the file contains content that would produce an error on subsequent inclusion, e.g. function important() { /* important code */} is definitely needed in your application but since functions cannot be redeclared should not be included again.&lt;/p&gt;</description></item><item><title>Java read file and write file template</title><link>https://joejztang.github.io/posts/java-read-write/</link><pubDate>Wed, 19 Apr 2017 15:36:01 +0000</pubDate><guid>https://joejztang.github.io/posts/java-read-write/</guid><description>&lt;h3 id="read-file-template"&gt;
 read file template
 &lt;a class="heading-link" href="#read-file-template"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;auto close file reader.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;public&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;static&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;void&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;main&lt;/span&gt;(String&lt;span style="color:#ff7b72;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;args)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;	&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;try&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;(BufferedReader&lt;span style="color:#6e7681"&gt; &lt;/span&gt;br&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;new&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;BufferedReader(&lt;span style="color:#ff7b72"&gt;new&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;FileReader(FILENAME)))&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;String&lt;span style="color:#6e7681"&gt; &lt;/span&gt;sCurrentLine;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;while&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;((sCurrentLine&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;br.readLine())&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#79c0ff"&gt;null&lt;/span&gt;)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;			&lt;/span&gt;System.out.println(sCurrentLine);&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;	&lt;/span&gt;}&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;catch&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;(IOException&lt;span style="color:#6e7681"&gt; &lt;/span&gt;e)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;e.printStackTrace();&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;	&lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;&lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;public&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;static&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;void&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;main&lt;/span&gt;(String&lt;span style="color:#ff7b72;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;args)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;	&lt;/span&gt;BufferedReader&lt;span style="color:#6e7681"&gt; &lt;/span&gt;br&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#79c0ff"&gt;null&lt;/span&gt;;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;	&lt;/span&gt;FileReader&lt;span style="color:#6e7681"&gt; &lt;/span&gt;fr&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#79c0ff"&gt;null&lt;/span&gt;;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;	&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;try&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;fr&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;new&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;FileReader(FILENAME);&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;br&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;new&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;BufferedReader(fr);&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;String&lt;span style="color:#6e7681"&gt; &lt;/span&gt;sCurrentLine;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;br&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;new&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;BufferedReader(&lt;span style="color:#ff7b72"&gt;new&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;FileReader(FILENAME));&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;while&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;((sCurrentLine&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;br.readLine())&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#79c0ff"&gt;null&lt;/span&gt;)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;			&lt;/span&gt;System.out.println(sCurrentLine);&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;	&lt;/span&gt;}&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;catch&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;(IOException&lt;span style="color:#6e7681"&gt; &lt;/span&gt;e)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;e.printStackTrace();&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;	&lt;/span&gt;}&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;finally&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;try&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;			&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;if&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;(br&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#79c0ff"&gt;null&lt;/span&gt;)&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;				&lt;/span&gt;br.close();&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;			&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;if&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;(fr&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#79c0ff"&gt;null&lt;/span&gt;)&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;				&lt;/span&gt;fr.close();&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;}&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;catch&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;(IOException&lt;span style="color:#6e7681"&gt; &lt;/span&gt;ex)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;			&lt;/span&gt;ex.printStackTrace();&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;		&lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;	&lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;&lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="write-to-file"&gt;
 write to file
 &lt;a class="heading-link" href="#write-to-file"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;import&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;java.io.*&lt;/span&gt;;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;&lt;/span&gt;&lt;span style="color:#ff7b72"&gt;public&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;FileWrite&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;public&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;static&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;void&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;main&lt;/span&gt;(String&lt;span style="color:#6e7681"&gt; &lt;/span&gt;args&lt;span style="color:#ff7b72;font-weight:bold"&gt;[]&lt;/span&gt;)&lt;span style="color:#ff7b72"&gt;throws&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;IOException&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;File&lt;span style="color:#6e7681"&gt; &lt;/span&gt;file&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;new&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;File(&lt;span style="color:#a5d6ff"&gt;&amp;#34;Hello1.txt&amp;#34;&lt;/span&gt;);&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// creates the file&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;file.createNewFile();&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// creates a FileWriter Object&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;FileWriter&lt;span style="color:#6e7681"&gt; &lt;/span&gt;writer&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;new&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;FileWriter(file);&lt;span style="color:#6e7681"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;// Writes the content to the file&lt;/span&gt;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;writer.write(&lt;span style="color:#a5d6ff"&gt;&amp;#34;This\n is\n an\n example\n&amp;#34;&lt;/span&gt;);&lt;span style="color:#6e7681"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;writer.flush();&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;writer.close();&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;&lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>遍历 java 目录下的所有文件</title><link>https://joejztang.github.io/posts/traverse-java-file/</link><pubDate>Wed, 19 Apr 2017 10:39:37 +0000</pubDate><guid>https://joejztang.github.io/posts/traverse-java-file/</guid><description>&lt;h3 id="经典方法"&gt;
 经典方法
 &lt;a class="heading-link" href="#%e7%bb%8f%e5%85%b8%e6%96%b9%e6%b3%95"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;找出 path 的长度, 获取 path[i] 为文件名. File 类的 list 方法.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;Main&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;public&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;static&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;void&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;main&lt;/span&gt;(String&lt;span style="color:#ff7b72;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;args)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;File&lt;span style="color:#6e7681"&gt; &lt;/span&gt;dir&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;new&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;File(&lt;span style="color:#a5d6ff"&gt;&amp;#34;C:&amp;#34;&lt;/span&gt;);&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;String&lt;span style="color:#ff7b72;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;children&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;dir.list();&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;if&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;(children&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;==&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#79c0ff"&gt;null&lt;/span&gt;)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;System.out.println(&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;#34;目录不存在或它不是一个目录&amp;#34;&lt;/span&gt;);&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;else&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72"&gt;for&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;(&lt;span style="color:#ff7b72"&gt;int&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;i&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;0;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;i&lt;span style="color:#ff7b72;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;children.length;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;i&lt;span style="color:#ff7b72;font-weight:bold"&gt;++&lt;/span&gt;)&lt;span style="color:#6e7681"&gt; &lt;/span&gt;{&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;String&lt;span style="color:#6e7681"&gt; &lt;/span&gt;filename&lt;span style="color:#6e7681"&gt; &lt;/span&gt;&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;children&lt;span style="color:#ff7b72;font-weight:bold"&gt;[&lt;/span&gt;i&lt;span style="color:#ff7b72;font-weight:bold"&gt;]&lt;/span&gt;;&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;System.out.println(filename);&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt; &lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6e7681"&gt;&lt;/span&gt;}&lt;span style="color:#6e7681"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果&lt;/p&gt;</description></item><item><title>About Me</title><link>https://joejztang.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joejztang.github.io/about/</guid><description>&lt;h2 id="who-am-i"&gt;
 Who am i
 &lt;a class="heading-link" href="#who-am-i"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I am a normal people.&lt;/p&gt;
&lt;p&gt;you can find me on &lt;a href="https://www.linkedin.com/in/130l" class="external-link" target="_blank" rel="noopener"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://github.com/joejztang" class="external-link" target="_blank" rel="noopener"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="purpose-of-this-blog"&gt;
 Purpose of this blog
 &lt;a class="heading-link" href="#purpose-of-this-blog"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;for self learning purposes. record what I have learned and my little hobbies or experience.&lt;/p&gt;
&lt;h2 id="tools-pool"&gt;
 Tools pool
 &lt;a class="heading-link" href="#tools-pool"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id="software-series"&gt;
 Software series
 &lt;a class="heading-link" href="#software-series"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" class="external-link" target="_blank" rel="noopener"&gt;Mathjax usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="math-series"&gt;
 Math series
 &lt;a class="heading-link" href="#math-series"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://web.stanford.edu/~hastie/ElemStatLearn/" class="external-link" target="_blank" rel="noopener"&gt;The Elements of Statistical Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.statlearning.com/" class="external-link" target="_blank" rel="noopener"&gt;An Introduction to Statistical Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mooc"&gt;
 MOOC
 &lt;a class="heading-link" href="#mooc"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id="ml"&gt;
 ML
 &lt;a class="heading-link" href="#ml"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/machine-learning" class="external-link" target="_blank" rel="noopener"&gt;Andrew Ng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/machinelearning/" class="external-link" target="_blank" rel="noopener"&gt;ml a-z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://machinelearningmastery.com/category/algorithms-from-scratch/" class="external-link" target="_blank" rel="noopener"&gt;core alg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>