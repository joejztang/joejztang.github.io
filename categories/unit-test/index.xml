<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unit Test on 130l</title><link>http://www.example.com/categories/unit-test/</link><description>Recent content in Unit Test on 130l</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 06 Jun 2019 15:42:00 +0000</lastBuildDate><atom:link href="http://www.example.com/categories/unit-test/index.xml" rel="self" type="application/rss+xml"/><item><title>python-unittest-mock</title><link>http://www.example.com/posts/python-unittest-mock/</link><pubDate>Thu, 06 Jun 2019 15:42:00 +0000</pubDate><guid>http://www.example.com/posts/python-unittest-mock/</guid><description>&lt;p&gt;recently, i started to write unittest for python applications. because what i did is data pipeline, i will use a lot of mocking and patching. this post is for recording purposes.&lt;/p&gt;
&lt;p&gt;unittest framework is MUCH MORE POWERFUL than I expected. so let me talked about a little bit about &lt;code&gt;unittest&lt;/code&gt; framework itself first.&lt;/p&gt;
&lt;h2 id="mock"&gt;
 &lt;code&gt;Mock&lt;/code&gt;
 &lt;a class="heading-link" href="#mock"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;this is one powerful object that unittest provides. basically, one can use &lt;code&gt;mock = Mock()&lt;/code&gt; to &amp;lsquo;fake&amp;rsquo; any object that you want to replace.&lt;/p&gt;</description></item></channel></rss>