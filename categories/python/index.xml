<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on 130l</title><link>https://joejztang.github.io/categories/python/</link><description>Recent content in Python on 130l</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 11 Jul 2019 13:52:38 +0000</lastBuildDate><atom:link href="https://joejztang.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>about python logging</title><link>https://joejztang.github.io/posts/about-python-logging/</link><pubDate>Thu, 11 Jul 2019 13:52:38 +0000</pubDate><guid>https://joejztang.github.io/posts/about-python-logging/</guid><description>&lt;h1 id="logging-basics"&gt;
 logging basics
 &lt;a class="heading-link" href="#logging-basics"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;logging&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;basicConfig(filename&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;#39;example.log&amp;#39;&lt;/span&gt;,level&lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt;logging&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;DEBUG)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;logging&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;debug(&lt;span style="color:#a5d6ff"&gt;&amp;#39;this is a debug msg&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;logging&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;info(&lt;span style="color:#a5d6ff"&gt;&amp;#39;this is an info msg&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;logging&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;warning(&lt;span style="color:#a5d6ff"&gt;&amp;#39;this is a warning msg&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;recommend reading &lt;a href="https://docs.python.org/3/howto/logging.html#logging-basic-tutorial" class="external-link" target="_blank" rel="noopener"&gt;official tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="more-thinking-how-to-log-from-different-module-in-the-same-log-file"&gt;
 more thinking: how to log from different module in the same log file?
 &lt;a class="heading-link" href="#more-thinking-how-to-log-from-different-module-in-the-same-log-file"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;it gave me a headache at first. and I tried importing &lt;code&gt;logging&lt;/code&gt; module in each module and log in the same file. it works somehow but with issues.&lt;/p&gt;</description></item><item><title>why mock? a general question</title><link>https://joejztang.github.io/posts/why-mock-a-general-question/</link><pubDate>Thu, 28 Feb 2019 14:11:03 +0000</pubDate><guid>https://joejztang.github.io/posts/why-mock-a-general-question/</guid><description>&lt;h2 id="what-is-mock"&gt;
 what is mock?
 &lt;a class="heading-link" href="#what-is-mock"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;as it implies, it is a object that pretend it being something else.&lt;/p&gt;
&lt;h2 id="why-we-want-to-mock"&gt;
 why we want to mock?
 &lt;a class="heading-link" href="#why-we-want-to-mock"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Assume that we want to test a function. Let&amp;rsquo;s call it &lt;code&gt;count_all_after_connection(connection)&lt;/code&gt;. It consumed a parameter called &lt;code&gt;connection&lt;/code&gt;, and this connection is not available so far(possibly because of not having access yet).&lt;/p&gt;
&lt;p&gt;But you still want to test it, but how?&lt;/p&gt;</description></item><item><title>python from import vs import</title><link>https://joejztang.github.io/posts/python-from-import-vs-import/</link><pubDate>Thu, 29 Mar 2018 10:52:14 +0000</pubDate><guid>https://joejztang.github.io/posts/python-from-import-vs-import/</guid><description>&lt;p&gt;python has two basic import syntax, they are&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;import module

from module import x
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;what is the difference and when do I use them?&lt;/p&gt;
&lt;h4 id="from-module-import-x"&gt;
 from module import x
 &lt;a class="heading-link" href="#from-module-import-x"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;the attributes and methods of the imported module types are imported directly into the local namespace, so they are available directly, without qualification by module name.&lt;/p&gt;
&lt;p&gt;for example:&lt;/p&gt;
&lt;p&gt;when I use &lt;code&gt;import types&lt;/code&gt;, I want to call function &lt;code&gt;FunctionType&lt;/code&gt; in &lt;code&gt;types&lt;/code&gt; module, I have to do this&lt;/p&gt;</description></item><item><title>super() in python</title><link>https://joejztang.github.io/posts/super-in-python/</link><pubDate>Sun, 12 Nov 2017 18:03:33 +0000</pubDate><guid>https://joejztang.github.io/posts/super-in-python/</guid><description>&lt;p&gt;In python, super() is a simple way to solve inheritance issues. It has two major use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;allow to avoid using base class explicitly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;working with multiple inheritance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;examples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-py" data-lang="py"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;Mammal&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self, mammalName):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(mammalName, &lt;span style="color:#a5d6ff"&gt;&amp;#39;is a warm-blooded animal.&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;Dog&lt;/span&gt;(Mammal):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#a5d6ff"&gt;&amp;#39;Dog has four legs.&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super()&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(&lt;span style="color:#a5d6ff"&gt;&amp;#39;Dog&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;d1 &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; Dog()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;output:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Dog has four legs.
Dog is a warm-blooded animal.
&lt;/code&gt;&lt;/pre&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-py" data-lang="py"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;Animal&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self, animalName):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(animalName, &lt;span style="color:#a5d6ff"&gt;&amp;#39;is an animal.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;Mammal&lt;/span&gt;(Animal):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self, mammalName):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(mammalName, &lt;span style="color:#a5d6ff"&gt;&amp;#39;is a warm-blooded animal.&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super()&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(mammalName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;NonWingedMammal&lt;/span&gt;(Mammal):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self, NonWingedMammalName):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(NonWingedMammalName, &lt;span style="color:#a5d6ff"&gt;&amp;#34;can&amp;#39;t fly.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super()&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(NonWingedMammalName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;NonMarineMammal&lt;/span&gt;(Mammal):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self, NonMarineMammalName):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(NonMarineMammalName, &lt;span style="color:#a5d6ff"&gt;&amp;#34;can&amp;#39;t swim.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super()&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(NonMarineMammalName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff7b72"&gt;class&lt;/span&gt; &lt;span style="color:#f0883e;font-weight:bold"&gt;Dog&lt;/span&gt;(NonMarineMammal, NonWingedMammal):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff7b72"&gt;def&lt;/span&gt; &lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#a5d6ff"&gt;&amp;#39;Dog has 4 legs.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super()&lt;span style="color:#ff7b72;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#d2a8ff;font-weight:bold"&gt;__init__&lt;/span&gt;(&lt;span style="color:#a5d6ff"&gt;&amp;#39;Dog&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;d &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; Dog()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#a5d6ff"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bat &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; NonMarineMammal(&lt;span style="color:#a5d6ff"&gt;&amp;#39;Bat&amp;#39;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;output:&lt;/p&gt;</description></item><item><title>regular expression python3</title><link>https://joejztang.github.io/posts/regular-expression-python3/</link><pubDate>Mon, 30 Oct 2017 17:49:22 +0000</pubDate><guid>https://joejztang.github.io/posts/regular-expression-python3/</guid><description>&lt;h1 id="regular-expression-in-python3"&gt;
 Regular expression in Python3
 &lt;a class="heading-link" href="#regular-expression-in-python3"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;credit from 廖雪峰的官网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见表达&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;\d&lt;/code&gt; &amp;mdash; 用来匹配数字(digit)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\w&lt;/code&gt; &amp;mdash; 用来匹配字母或数字(Word)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\s&lt;/code&gt; &amp;mdash; 用来匹配空格(space)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt; &amp;mdash; 用来匹配任意字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; &amp;mdash; 匹配&amp;gt;=0个字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt; &amp;mdash; 匹配&amp;gt;0个字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt; &amp;mdash; 匹配0或1个字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{n, m}&lt;/code&gt; &amp;mdash; 表示 n-m 个字符, 通常和&lt;code&gt;\d&lt;/code&gt;,&lt;code&gt;\w&lt;/code&gt;,&lt;code&gt;\s&lt;/code&gt;搭配着用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[]&lt;/code&gt; &amp;mdash; 表示范围. eg: &lt;code&gt;[a-zA-Z\_][0-9a-zA-Z\_]*&lt;/code&gt;可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A|B&lt;/code&gt; &amp;mdash; 可以匹配A或B&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt; &amp;mdash; 表示行的开头&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt; &amp;mdash; 表示行的结束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;re 模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;r&lt;/code&gt; 前缀, 不考虑转译的问题. eg:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-py" data-lang="py"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s &lt;span style="color:#ff7b72;font-weight:bold"&gt;=&lt;/span&gt; &lt;span style="color:#79c0ff"&gt;r&lt;/span&gt;&lt;span style="color:#a5d6ff"&gt;&amp;#39;ABC\-001&amp;#39;&lt;/span&gt; &lt;span style="color:#8b949e;font-style:italic"&gt;# Python的字符串&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;# 对应的正则表达式字符串不变：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8b949e;font-style:italic"&gt;# &amp;#39;ABC\-001&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;match()&lt;/code&gt; 来判断是否匹配成功, 成功则返回一个 Match 对象, 否则, 返回 &lt;code&gt;None&lt;/code&gt;&lt;/p&gt;</description></item><item><title>python3 cheathing sheet</title><link>https://joejztang.github.io/posts/python3-cheathing-sheet/</link><pubDate>Thu, 05 Oct 2017 22:35:25 +0000</pubDate><guid>https://joejztang.github.io/posts/python3-cheathing-sheet/</guid><description>&lt;p&gt;python3 is not compatible with lower version of python e.g. python2.x. Listed are some python basics and differences between python2 and python3.&lt;/p&gt;</description></item></channel></rss>